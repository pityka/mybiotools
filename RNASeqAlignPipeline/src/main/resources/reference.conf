##########################################################
# RNASEQ align and analysis pipeline configuration start #
##########################################################
#
# Samples are specified in "input groups". Each input group is aligned with STAR and counted with the htseq algorithm.
# An input group represents a library. Each input group has a unique name, a condition, and a sample (individual) label. 
# Furthermore you specify the reference sequence index folder, the adapter sequence, the read group, the GTF file for counting,
# the fastqs, the parameters for counting (strandedness, allow multiplemapping reads, minimum quality, gtf feature names)

#alignment.referenceFolder = ""
#adapterSequence = ""
#alignment.extraStarParameters = ""
#readGroup {
#  CN = "UHTS-LGTF"
#  #DS = ""
#  #DT = ""
#  #LB = ""
#  PL = Illumina
#  #SM = ""      
#}
##htseqcount.GTF = ""
#htseqcount.gene_idAttribute = "gene_id"
#htseqcount.transcript_idAttribute = "transcript_id"
#htseqcount.exonFeatureName = exon
#htseqcount.countLongestTranscript = false
#htseqcount.minQual = 10
#htseqcount.allowMultiMapInSameGene = false
#htseqcount.strandedness = notstranded
##name = ""
##replicationGroup = ""
##conditionGroup = ""
#machine = ""
#regex = "^(?<sample>\\d+)_?(?<condition>.*)_[^_]{12}_(?<lane>L\\d+).*fastq.gz$"
#fastqs = []

rnaseq.star.CPU = 4
rnaseq.star.RAM = 20000
rnaseq.mergebam.RAM = 1000
rnaseq.htseqcount.RAM = 1000
rnaseq.dryrun = false
rnaseq.inputgroupsBatch = []
rnaseq.inputgroups = []
rnaseq.spikeins = []
rnaseq.spikeInPerSample = ""
rnaseq.spikeInData = ""
rnaseq.pseudoCoverage = 0.01
rnaseq.thresholdDropIfCoverageBelowInAllSamples = 10
rnaseq.pairwiseDE1 = []
rnaseq.pairwiseDE2 = []
rnaseq.translateHGNC = false
rnaseq.houseKeepingGenes = -
rnaseq.gmtFiles = []
rnaseq.readLength = 100
rnaseq.normalizationMethods = ["deseq"]
rnaseq.regionsToPlot = []
rnaseq.genesToPlot = []
rnaseq.secondaryDimension = []
rnaseq.conditionOrderOnPlots = []

htseqcount.gene_idAttribute = "gene_id"
htseqcount.transcript_idAttribute = "transcript_id"
htseqcount.strandedness = notstranded
htseqcount.exonFeatureName = exon
htseqcount.minQual = 10
htseqcount.bam = "-"
htseqcount.bams = "-"
htseqcount.countLongestTranscript = false
htseqcount.allowMultiMapInSameGene = false


# 
# Differential expression and PCA
#################################

# A list of tsv files from htseqcount or a csv printed from R with row and col names. 
countanalysis.counts = []

# One tsv file from htseqcount or a csv printed from R with row and col names. 
countanalysis.count = "-"

# Gene lengths for rpkm
#countanalysis.lengths = "-"

countanalysis.outTrunk = ".//"

# A file listing samples and spikein mixes each line has the form SAMPLENAME MIX1 (or MIX2)
countanalysis.spikeInPerSample = ""

# ERCC spikeindata csv file
countanalysis.spikeInData = ""

# do pca
countanalysis.pca = true

# Add this amount to each count
countanalysis.pseudoCoverage = 0.01

# If all samples of a gene are below this count per bp then drop the gene
countanalysis.thresholdDropIfCoverageBelowInAllSamples = 10

# list of samples which need pairwise DE. [A1,A2,B1,B2] means A1 vs A2, B1 vs B2
countanalysis.pairwiseDE1 = []
countanalysis.pairwiseDE2 = []

# translate ensemble names to hgnc. 
countanalysis.translateHGNC = false

countanalysis.readLength = 100

# Do detailed expression level plot on these genes
countanalysis.genesToPlot = []
countanalysis.regionsToPlot = []

# Specify sample -> condition mapping. E.g. [Sample1,condition1,Sample2,condition2]
countanalysis.conditions = []
countanalysis.secondaryDimension = []

# Specify column -> X mapping. Columns with the same X will be pooled.
countanalysis.columnToSample = []

countanalysis.houseKeepingGenes = -

countanalysis.gmtFiles = []

countanalysis.normalizationMethods = ["deseq"]

countanalysis.conditionOrderOnPlots = []

########################################################
# RNASEQ align and analysis pipeline configuration end #
########################################################