/* 
* The MIT License
*
* Copyright (c) 2015 ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland, 
* Group Fellay
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation 
* the rights to use, copy, modify, merge, publish, distribute, sublicense, 
* and/or sell copies of the Software, and to permit persons to whom the Software
* is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
* SOFTWARE.
*/

package mybiotools
package stat
import GlobalTest._
import org.saddle._
import mybiotools.gwascommons._
import mybiotools.plots._
import org.scalatest.FunSpec
import org.scalatest.Matchers
import org.apache.commons.math3.random.{ RandomGenerator, RandomDataGenerator, Well44497b }

class GlobalTestSpec extends FunSpec with Matchers {

  // describe("dfs") {
  //   it("null distribution") {
  //     val rand = new Well44497b(1)

  //     val numSamples = 1000
  //     val numFeatures = 133
  //     def simulateRandomColumn(sd: Double): Vec[Double] = Vec(1 to numSamples map (i => new RandomDataGenerator(rand).nextGaussian(0.0, sd)): _*)
  //     val x = Mat(1 to numFeatures map (i => simulateRandomColumn(1.0)): _*)

  //     def makeY(x: Mat[Double], effectSize: Double): Vec[Boolean] = {
  //       Vec(0 until x.numRows map { i => new RandomDataGenerator(rand).nextGaussian(0.0, 1.0) + effectSize * x.raw(i, 0)
  //       }: _*).map(_ >= 0.0)
  //     }

  //     val n = 100
  //     val effectSize = 0.5
  //     val ps = 1 to n map { i =>
  //       val yy = makeY(x, effectSize)

  //       test_logistic(
  //         design = x,
  //         condition = Mat(vec.ones(numSamples)),
  //         outcome = yy
  //       )._2
  //     }
  //     println(ps)
  //     // mybiotools.plots.QQPlot.computeLambda(ps) should equal(0.984240322566351)

  //     mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))

  //   }
  // }

  // describe("Imhof") {

  //   it("examples") {
  //     val rand = new Well44497b(1)
  //     val rv = Vec(1 to 2000 map (i => rand.nextGaussian): _*)
  //     GlobalTest.linCombChiSquaresCumulativeImhof(rv, 100.0) should equal(0.0013307271209002103)
  //     GlobalTest.linCombChiSquaresCumulativeImhof(Vec(6, 3, 1), 1.0) should equal(0.9458209697002363)
  //     GlobalTest.linCombChiSquaresCumulativeImhof(Vec(0.6, 0.3, 0.1), 2.0) should equal(0.12397612885942415)
  //     GlobalTest.linCombChiSquaresCumulativeImhof(Vec(-6, 3, 1), 2.0) should equal(0.28983336772512563)

  //   }
  // }

  describe("Liu 2009 + convolution") {
    // it("problem 1") {
    //   val l = Vector(0.40665911413149386, 2.4130933981658645E-17, -6.0374038098790556E-18, -0.001388670909470643, 3.20851333646822E-18, -3.8149384169303945E-18, 4.180541142629801E-18, 2.739612948186516E-18, -3.2686011074128142E-18, 1.5907098351154144E-18, -2.4112145933225942E-18, -1.886460707473265E-18, -1.2940768951871937E-18, -5.948137607845947E-19, -5.517599839003177E-19, -0.0013886709094711762, -7.608789407021E-19, -2.0008126987609194E-18, -3.3726728362390295E-19, 4.712885086893128E-19, 2.5267434195902986E-19, 1.0553566989207388E-18, 1.070690353252929E-18, 6.55477711501457E-19, -0.001388670909471095, -0.0013886709094709905, -0.0013886709094710682, -0.0013886709094710187, -0.0013886709094710588, -0.0013886709094710556, -0.0013886709094710235, -0.0013886709094710274, -0.0013886709094710539, -0.0013886709094710536, -0.001388670909471032, -0.0013886709094710298, -0.0013886709094710489, -0.0013886709094710333, -0.0013886709094710328, -0.0013886709094710502, -0.0013886709094710304, -0.0013886709094710359, -0.0013886709094710478, -0.0013886709094710309, -0.0013886709094710487, -0.0013886709094710328, -0.0013886709094710515, -0.001388670909471034, -0.0013886709094710482, -0.0013886709094710474, -0.001388670909471047, -0.0013886709094710359, -0.001388670909471047, -0.001388670909471037, -0.0013886709094710343, -0.001388670909471034, -0.001388670909471035, -0.001388670909471046, -0.0013886709094710356, -0.0013886709094710448, -0.0013886709094710378, -0.0013886709094710443, -0.0013886709094710348, -0.0013886709094710333, -0.001388670909471051, -0.0013886709094710356, -0.001388670909471037, -0.001388670909471046, -0.0013886709094710307, -0.0013886709094710471, -0.001388670909471048, -0.001388670909471033, -0.0013886709094710356, -0.0013886709094710385, -0.001388670909471037, -0.0013886709094710374, -0.0013886709094710367, -0.0013886709094710341, -0.001388670909471044, -0.0013886709094710448, -0.0013886709094710454, -0.0013886709094710463, -0.0013886709094710443, -0.0013886709094710443, -0.0013886709094710439, -0.0013886709094710322, -0.0013886709094710326, -0.0013886709094710443, -0.0013886709094710458, -0.001388670909471049, -0.0013886709094710474, -0.0013886709094710356, -0.0013886709094710448, -0.0013886709094710439, -0.0013886709094710322, -0.001388670909471043, -0.0013886709094710497, -0.0013886709094710317, -0.0013886709094710341, -0.0013886709094710458, -0.0013886709094710352, -0.0013886709094710513, -0.0013886709094710463, -0.001388670909471048, -0.0013886709094710352, -0.0013886709094710402, -0.0013886709094710439, -0.0013886709094710421, -0.0013886709094710404, -0.0013886709094710434, -0.001388670909471043, -0.001388670909471043, -0.0013886709094710474, -0.0013886709094710495, -0.0013886709094710352, -0.0013886709094710456, -0.001388670909471037, -0.0013886709094710517, -0.0013886709094710456, -0.0013886709094710437, -0.001388670909471048, -0.001388670909471043, -0.0013886709094710307, -0.0013886709094710454, -0.0013886709094710372, -0.0013886709094710328, -0.0013886709094710426, -0.0013886709094710434, -0.001388670909471041, -0.0013886709094710489, -0.0013886709094710335, -0.0013886709094710434, -0.0013886709094710352, -0.001388670909471038, -0.0013886709094710378, -0.0013886709094710343, -0.001388670909471036, -0.001388670909471037, -0.0013886709094710445, -0.0013886709094710337, -0.0013886709094710478, -0.001388670909471038, -0.0013886709094710387, -0.001388670909471046, -0.0013886709094710502, -0.0013886709094710372, -0.0013886709094710439, -0.0013886709094710326, -0.0013886709094710434, -0.0013886709094710454, -0.0013886709094710395, -0.0013886709094710376, -0.0013886709094710417, -0.001388670909471038, -0.0013886709094710395, -0.001388670909471038, -0.0013886709094710428, -0.0013886709094710421, -0.001388670909471043, -0.0013886709094710428, -0.0013886709094710432, -0.0013886709094710406, -0.001388670909471041, -0.00138867090947104, -0.0013886709094710426, -0.0013886709094710428, -0.0013886709094710426, -0.0013886709094710363, -0.0013886709094710387, -0.0013886709094710406, -0.0013886709094710402, -0.0013886709094710391, -0.001388670909471038, -0.0013886709094710406, -0.00138867090947104, -0.0013886709094710404, -0.0013886709094710415, -0.0013886709094710391, -0.0013886709094710404, -0.0013886709094710391, -0.0013886709094710374, -0.001388670909471038, -0.0013886709094710365, -0.0013886709094710374, -0.0013886709094710374, -0.0013886709094710387, -0.0013886709094710376, -0.001388670909471038, -0.0013886709094710378, -0.0013886709094710393, -0.0013886709094710408, -0.0013886709094710391, -0.0013886709094710393, -0.0013886709094710387, -0.0013886709094710426, -0.0013886709094710406, -0.001388670909471041, -0.0013886709094710415, -0.0013886709094710413, -0.0013886709094710363, -0.0013886709094710387, -0.001388670909471043, -0.001388670909471045, -0.0013886709094710374, -0.0013886709094710348, -0.0013886709094710395, -0.0013886709094710474, -0.001388670909471044, -0.001388670909471042, -0.0013886709094710497, -0.0013886709094710348, -0.001388670909471045, -0.0013886709094710376, -0.0013886709094710385, -0.0013886709094710439, -0.0013886709094710393, -0.001388670909471045, -0.0013886709094710452, -0.0013886709094710367, -0.0013886709094710495, -0.001388670909471037, -0.0013886709094710452, -0.0013886709094710346, -0.0013886709094710387, -0.001388670909471043, -0.0013886709094710395, -0.0013886709094710417, -0.0013886709094710456, -0.001388670909471044, -0.0013886709094710465, -0.0013886709094710465, -0.0013886709094710428, -0.0013886709094710417, -0.0013886709094710398, -0.0013886709094710463, -0.00138867090947105, -0.0013886709094710398, -0.0013886709094710471, -0.0013886709094710378, -0.0013886709094710456, -0.0013886709094710434, -0.0013886709094710417, -0.0013886709094710448, -0.001388670909471043, -0.001388670909471037, -0.0013886709094710326, -0.0013886709094710437, -0.001388670909471046, -0.0013886709094710341, -0.0013886709094710376, -0.0013886709094710437, -0.0013886709094710454, -0.0013886709094710378, -0.0013886709094710413, -0.0013886709094710417, -0.0013886709094710448, -0.001388670909471044, -0.0013886709094710382, -0.0013886709094710417, -0.0013886709094710391, -0.00138867090947104, -0.0013886709094710391, -0.0013886709094710413, -0.0013886709094710404, -0.0013886709094710398, -0.00138867090947104, -0.0013886709094710402, -0.0013886709094710413, -0.001388670909471041, -0.0013886709094710408, -0.0013886709094710434, -0.0013886709094710443, -0.0013886709094710448, -0.001388670909471038, -0.0013886709094710434, -0.0013886709094710408, -0.0013886709094710387, -0.0013886709094710413, -0.001388670909471039, -0.0013886709094710398, -0.0013886709094710424, -0.0013886709094710413, -0.0013886709094710421, -0.001388670909471043, -0.0013886709094710408, -0.0013886709094710404, -0.0013886709094710404, -0.0013886709094710372, -0.0013886709094710352, -0.0013886709094710458, -0.0013886709094710417, -0.0013886709094710393, -0.0013886709094710471, -0.0013886709094710402, -0.0013886709094710415, -0.001388670909471043, -0.0013886709094710434, -0.0013886709094710395, -0.001388670909471041, -0.0013886709094710402, -0.001388670909471042, -0.0013886709094710432, -0.001388670909471045, -0.0013886709094710439, -0.001388670909471044, -0.0013886709094710445, -0.0013886709094710458, -0.0013886709094710359, -0.0013886709094710372, -0.001388670909471047, -0.0013886709094710395, -0.0013886709094710415, -0.0013886709094710391, -0.0013886709094710434, -0.001388670909471043, -0.0013886709094710408, -0.0013886709094710434, -0.001388670909471038, -0.001388670909471043, -0.0013886709094710415, -0.001388670909471041, -0.0013886709094710391, -0.0013886709094710393, -0.0013886709094710395, -0.0013886709094710406, -0.0013886709094710413, -0.0013886709094710365, -0.0013886709094710367, -0.0013886709094710443, -0.001388670909471038, -0.0013886709094710395, -0.0013886709094710408, -0.0013886709094710395, -0.0013886709094710421, -0.0013886709094710415, -0.0013886709094710439, -0.0013886709094710365, -0.0013886709094710428, -0.0013886709094710385, -0.0013886709094710445, -0.0013886709094710458, -0.0013886709094710415, -0.001388670909471039, -0.0013886709094710434, -0.0013886709094710376, -0.0013886709094710439, -0.0013886709094710454, -0.0013886709094710417, -0.0013886709094710454, -0.0013886709094710395, -0.001388670909471039, -0.0013886709094710413, -0.0013886709094710395, -0.0013886709094710404, -0.001388670909471042, -0.0013886709094710426, -0.001388670909471041, -0.0013886709094710408, -0.0013886709094710391, -0.0013886709094710395, -0.0013886709094710393, -0.0013886709094710402, -0.001388670909471042, -0.0013886709094710432, -0.0013886709094710437, -0.0013886709094710404, -0.0013886709094710408, -0.0013886709094710393, -0.0013886709094710424, -0.0013886709094710421, -0.0013886709094710378, -0.0013886709094710421, -0.001388670909471041, -0.0013886709094710404, -0.0013886709094710404, -0.001388670909471043, -0.001388670909471039, -0.0013886709094710408, -0.0013886709094710421, -0.0013886709094710417, -0.0013886709094710417, -0.0013886709094710432, -0.0013886709094710391, -0.0013886709094710404, -0.0013886709094710374, -0.001388670909471041, -0.0013886709094710404, -0.0013886709094710391, -0.0013886709094710387, -0.0013886709094710404, -0.0013886709094710395, -0.0013886709094710406, -0.0013886709094710413, -0.001388670909471042, -0.0013886709094710406, -0.0013886709094710393, -0.0013886709094710413, -0.0013886709094710398, -0.0013886709094710415, -0.001388670909471041, -0.0013886709094710424, -0.0013886709094710406, -0.0013886709094710426, -0.0013886709094710393, -0.0013886709094710413, -0.0013886709094710402, -0.0013886709094710393, -0.0013886709094710408, -0.001388670909471041, -0.001388670909471041, -0.0013886709094710408)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(Vec(l: _*), 0.0) should equal()
    // }
    // it("problem 2") {
    //   val l = Vector(11.198961599508044, 0.025487079040990228, 0.001157762584125058, 6.610633922666967E-4, 9.712883219454172E-5, -4.865543680754854E-4, -4.4080291508012524E-16, 8.259402316935763E-17, -4.8655728805233354E-4, 5.615581942902495E-17, -5.3560027600787054E-17, 2.180877853969213E-17, -2.3311100831940876E-17, -1.774811007507066E-17, -1.5295197887714534E-17, 1.571112264762672E-17, -9.260158459028144E-18, 1.2771709649047719E-17, 1.1389772656057527E-17, 1.0988671068533161E-17, -6.915058792607439E-18, 6.437807672092257E-18, 5.070230319383912E-18, -5.573729529700108E-18, -3.771261236608769E-18, 2.143521603609989E-18, -8.261113929552383E-19, -2.931523564405323E-19, -4.865572880338878E-4, -4.865572880380861E-4, -4.865572880366621E-4, -4.865572880369455E-4, -4.865572880377327E-4, -4.8655728803709145E-4, -4.865572880376227E-4, -4.865572880375988E-4, -4.8655728803715216E-4, -4.865572880371637E-4, -4.8655728803756237E-4, -4.8655728803718046E-4, -4.8655728803755316E-4, -4.8655728803755397E-4, -4.8655728803718567E-4, -4.8655728803719537E-4, -4.865572880375333E-4, -4.865572880372014E-4, -4.8655728803752817E-4, -4.8655728803720215E-4, -4.8655728803752155E-4, -4.865572880375177E-4, -4.865572880372118E-4, -4.865572880375139E-4, -4.8655728803721364E-4, -4.8655728803721814E-4, -4.8655728803750626E-4, -4.8655728803722936E-4, -4.8655728803723695E-4, -4.8655728803749954E-4, -4.865572880374987E-4, -4.865572880374934E-4, -4.8655728803724134E-4, -4.865572880374881E-4, -4.8655728803724703E-4, -4.8655728803725126E-4, -4.865572880374815E-4, -4.865572880372561E-4, -4.8655728803747927E-4, -4.865572880374756E-4, -4.865572880372592E-4, -4.8655728803747374E-4, -4.865572880372601E-4, -4.865572880372632E-4, -4.865572880374669E-4, -4.8655728803727007E-4, -4.8655728803746734E-4, -4.865572880372709E-4, -4.8655728803746344E-4, -4.865572880372746E-4, -4.8655728803745975E-4, -4.8655728803727614E-4, -4.8655728803727674E-4, -4.865572880374562E-4, -4.865572880374564E-4, -4.8655728803745336E-4, -4.8655728803727826E-4, -4.865572880372808E-4, -4.86557288037284E-4, -4.86557288037449E-4, -4.865572880372855E-4, -4.8655728803744864E-4, -4.8655728803728585E-4, -4.865572880374478E-4, -4.8655728803728796E-4, -4.865572880374453E-4, -4.86557288037446E-4, -4.8655728803729116E-4, -4.86557288037292E-4, -4.86557288037444E-4, -4.8655728803744116E-4, -4.865572880374429E-4, -4.865572880372939E-4, -4.8655728803729506E-4, -4.865572880372967E-4, -4.865572880374409E-4, -4.865572880374378E-4, -4.8655728803743915E-4, -4.8655728803729815E-4, -4.865572880374361E-4, -4.8655728803729934E-4, -4.865572880374363E-4, -4.8655728803743514E-4, -4.865572880374344E-4, -4.865572880374338E-4, -4.8655728803730016E-4, -4.865572880373003E-4, -4.865572880374319E-4, -4.865572880374322E-4, -4.86557288037302E-4, -4.865572880373016E-4, -4.865572880374303E-4, -4.8655728803730303E-4, -4.865572880374294E-4, -4.8655728803730227E-4, -4.865572880373034E-4, -4.865572880374282E-4, -4.8655728803730406E-4, -4.865572880373048E-4, -4.8655728803730574E-4, -4.865572880374289E-4, -4.865572880374271E-4, -4.8655728803742636E-4, -4.865572880373082E-4, -4.865572880374261E-4, -4.8655728803742473E-4, -4.865572880374222E-4, -4.8655728803742484E-4, -4.8655728803742603E-4, -4.8655728803730883E-4, -4.865572880373086E-4, -4.86557288037311E-4, -4.865572880373095E-4, -4.8655728803731013E-4, -4.865572880374218E-4, -4.8655728803742435E-4, -4.8655728803731105E-4, -4.86557288037312E-4, -4.8655728803742224E-4, -4.865572880373126E-4, -4.865572880374211E-4, -4.865572880374206E-4, -4.8655728803741904E-4, -4.865572880373136E-4, -4.865572880374197E-4, -4.865572880374195E-4, -4.8655728803731425E-4, -4.865572880373149E-4, -4.8655728803741855E-4, -4.8655728803741714E-4, -4.865572880373151E-4, -4.865572880373159E-4, -4.865572880373153E-4, -4.865572880373178E-4, -4.8655728803731664E-4, -4.8655728803741763E-4, -4.865572880373175E-4, -4.86557288037417E-4, -4.8655728803741584E-4, -4.865572880374151E-4, -4.8655728803731826E-4, -4.865572880373189E-4, -4.8655728803731913E-4, -4.8655728803741476E-4, -4.8655728803741535E-4, -4.8655728803741503E-4, -4.8655728803731935E-4, -4.8655728803731973E-4, -4.865572880374142E-4, -4.8655728803741357E-4, -4.8655728803741443E-4, -4.865572880373204E-4, -4.865572880374129E-4, -4.8655728803732114E-4, -4.8655728803732146E-4, -4.865572880373219E-4, -4.865572880374127E-4, -4.8655728803732146E-4, -4.865572880373228E-4, -4.8655728803741183E-4, -4.8655728803732314E-4, -4.8655728803732184E-4, -4.865572880374114E-4, -4.8655728803741205E-4, -4.865572880373237E-4, -4.8655728803732406E-4, -4.8655728803741096E-4, -4.865572880373249E-4, -4.8655728803732515E-4, -4.8655728803740977E-4, -4.865572880374095E-4, -4.8655728803740934E-4, -4.865572880374085E-4, -4.865572880373257E-4, -4.8655728803732656E-4, -4.865572880374087E-4, -4.865572880374075E-4, -4.8655728803740793E-4, -4.865572880373261E-4, -4.8655728803740706E-4, -4.865572880373268E-4, -4.8655728803740614E-4, -4.86557288037406E-4, -4.8655728803732705E-4, -4.865572880373272E-4, -4.8655728803740603E-4, -4.86557288037329E-4, -4.865572880374055E-4, -4.86557288037328E-4, -4.8655728803732835E-4, -4.865572880373278E-4, -4.8655728803740554E-4, -4.86557288037405E-4, -4.8655728803740495E-4, -4.8655728803732905E-4, -4.8655728803732943E-4, -4.8655728803733003E-4, -4.8655728803733035E-4, -4.865572880373299E-4, -4.8655728803740256E-4, -4.8655728803740294E-4, -4.865572880374037E-4, -4.865572880374039E-4, -4.865572880374039E-4, -4.865572880373314E-4, -4.865572880373316E-4, -4.8655728803733203E-4, -4.8655728803733165E-4, -4.865572880373328E-4, -4.865572880373339E-4, -4.865572880374035E-4, -4.865572880374018E-4, -4.8655728803740055E-4, -4.8655728803740175E-4, -4.86557288037401E-4, -4.865572880373339E-4, -4.8655728803733415E-4, -4.8655728803733474E-4, -4.8655728803733464E-4, -4.865572880373348E-4, -4.8655728803740055E-4, -4.8655728803733377E-4, -4.86557288037401E-4, -4.865572880374014E-4, -4.8655728803740055E-4, -4.865572880373993E-4, -4.865572880373988E-4, -4.8655728803739893E-4, -4.865572880373359E-4, -4.865572880373985E-4, -4.8655728803733534E-4, -4.865572880373359E-4, -4.8655728803733664E-4, -4.8655728803733637E-4, -4.865572880373369E-4, -4.8655728803733626E-4, -4.8655728803733735E-4, -4.8655728803733735E-4, -4.865572880373981E-4, -4.865572880373978E-4, -4.865572880373975E-4, -4.865572880373973E-4, -4.865572880373965E-4, -4.8655728803733767E-4, -4.865572880373967E-4, -4.8655728803733854E-4, -4.865572880373961E-4, -4.8655728803739557E-4, -4.8655728803739573E-4, -4.8655728803733913E-4, -4.8655728803739546E-4, -4.865572880373945E-4, -4.8655728803739513E-4, -4.865572880373944E-4, -4.865572880373395E-4, -4.8655728803733973E-4, -4.865572880373947E-4, -4.8655728803734044E-4, -4.8655728803739405E-4, -4.865572880373934E-4, -4.865572880373396E-4, -4.8655728803739237E-4, -4.865572880373934E-4, -4.8655728803739204E-4, -4.8655728803739226E-4, -4.8655728803734E-4, -4.865572880373406E-4, -4.8655728803734103E-4, -4.8655728803734206E-4, -4.865572880373416E-4, -4.865572880373417E-4, -4.8655728803734195E-4, -4.8655728803734304E-4, -4.865572880373433E-4, -4.8655728803734244E-4, -4.8655728803739156E-4, -4.8655728803739215E-4, -4.865572880373431E-4, -4.865572880373431E-4, -4.8655728803734423E-4, -4.8655728803734347E-4, -4.8655728803739145E-4, -4.865572880373911E-4, -4.8655728803739123E-4, -4.865572880373449E-4, -4.8655728803739096E-4, -4.8655728803739063E-4, -4.8655728803739E-4, -4.8655728803738944E-4, -4.865572880373894E-4, -4.8655728803734456E-4, -4.8655728803738874E-4, -4.8655728803734456E-4, -4.8655728803738836E-4, -4.865572880373449E-4, -4.8655728803734645E-4, -4.8655728803734515E-4, -4.865572880373454E-4, -4.865572880373455E-4, -4.8655728803734624E-4, -4.865572880373457E-4, -4.8655728803734727E-4, -4.8655728803738906E-4, -4.8655728803734656E-4, -4.865572880373873E-4, -4.865572880373883E-4, -4.8655728803734786E-4, -4.8655728803738744E-4, -4.865572880373881E-4, -4.8655728803738744E-4, -4.8655728803734775E-4, -4.8655728803734765E-4, -4.865572880373864E-4, -4.865572880373875E-4, -4.86557288037387E-4, -4.86557288037387E-4, -4.865572880373487E-4, -4.8655728803734846E-4, -4.86557288037349E-4, -4.8655728803734916E-4, -4.865572880373497E-4, -4.865572880373863E-4, -4.8655728803738695E-4, -4.8655728803738494E-4, -4.865572880373854E-4, -4.865572880373844E-4, -4.865572880373847E-4, -4.8655728803738445E-4, -4.865572880373485E-4, -4.865572880373841E-4, -4.86557288037349E-4, -4.865572880373838E-4, -4.865572880373498E-4, -4.865572880373834E-4, -4.865572880373505E-4, -4.8655728803738326E-4, -4.865572880373508E-4, -4.8655728803738267E-4, -4.8655728803738267E-4, -4.8655728803738234E-4, -4.865572880373829E-4, -4.865572880373518E-4, -4.865572880373508E-4, -4.8655728803735133E-4, -4.8655728803735133E-4, -4.865572880373521E-4, -4.865572880373826E-4, -4.865572880373832E-4, -4.865572880373514E-4, -4.8655728803738153E-4, -4.865572880373531E-4, -4.865572880373523E-4, -4.865572880373523E-4, -4.8655728803735366E-4, -4.8655728803735393E-4, -4.8655728803735204E-4, -4.865572880373526E-4, -4.8655728803735404E-4, -4.8655728803738153E-4, -4.865572880373813E-4, -4.8655728803738136E-4, -4.865572880373808E-4, -4.8655728803738017E-4, -4.865572880373812E-4, -4.865572880373779E-4, -4.865572880373781E-4, -4.865572880373773E-4, -4.8655728803738077E-4, -4.86557288037379E-4, -4.8655728803737985E-4, -4.8655728803738017E-4, -4.8655728803737974E-4, -4.8655728803737936E-4, -4.865572880373794E-4, -4.86557288037379E-4, -4.865572880373786E-4, -4.8655728803737795E-4, -4.8655728803737665E-4, -4.8655728803735393E-4, -4.8655728803735437E-4, -4.8655728803735475E-4, -4.86557288037378E-4, -4.8655728803737773E-4, -4.865572880373759E-4, -4.865572880373765E-4, -4.865572880373765E-4, -4.865572880373768E-4, -4.865572880373768E-4, -4.865572880373748E-4, -4.865572880373549E-4, -4.865572880373548E-4, -4.86557288037355E-4, -4.8655728803735534E-4, -4.865572880373555E-4, -4.8655728803735545E-4, -4.865572880373758E-4, -4.8655728803737426E-4, -4.865572880373752E-4, -4.8655728803737475E-4, -4.865572880373743E-4, -4.8655728803737513E-4, -4.865572880373742E-4, -4.8655728803737486E-4, -4.86557288037374E-4, -4.8655728803737345E-4, -4.8655728803735583E-4, -4.8655728803735675E-4, -4.8655728803735724E-4, -4.8655728803735746E-4, -4.865572880373573E-4, -4.865572880373572E-4, -4.865572880373576E-4, -4.8655728803735805E-4, -4.865572880373567E-4, -4.865572880373576E-4, -4.865572880373567E-4, -4.865572880373597E-4, -4.865572880373584E-4, -4.8655728803735936E-4, -4.865572880373582E-4, -4.8655728803735903E-4, -4.865572880373594E-4, -4.865572880373591E-4, -4.8655728803735914E-4, -4.8655728803736033E-4, -4.8655728803736E-4, -4.865572880373602E-4, -4.8655728803736104E-4, -4.8655728803736066E-4, -4.865572880373617E-4, -4.865572880373616E-4, -4.865572880373609E-4, -4.865572880373616E-4, -4.865572880373605E-4, -4.865572880373747E-4, -4.8655728803736196E-4, -4.865572880373736E-4, -4.8655728803737323E-4, -4.8655728803737334E-4, -4.8655728803737285E-4, -4.865572880373726E-4, -4.865572880373727E-4, -4.8655728803737237E-4, -4.8655728803737226E-4, -4.8655728803737193E-4, -4.865572880373722E-4, -4.8655728803737166E-4, -4.8655728803737063E-4, -4.865572880373622E-4, -4.865572880373705E-4, -4.865572880373719E-4, -4.865572880373716E-4, -4.8655728803737096E-4, -4.865572880373712E-4, -4.865572880373708E-4, -4.865572880373707E-4, -4.8655728803736277E-4, -4.865572880373702E-4, -4.865572880373626E-4, -4.8655728803736646E-4, -4.8655728803736293E-4, -4.8655728803736673E-4, -4.865572880373645E-4, -4.8655728803736434E-4, -4.8655728803736304E-4, -4.8655728803736516E-4, -4.8655728803736586E-4, -4.8655728803736705E-4, -4.8655728803736586E-4, -4.865572880373634E-4, -4.8655728803736445E-4, -4.865572880373649E-4, -4.865572880373653E-4, -4.865572880373636E-4, -4.8655728803736385E-4, -4.865572880373635E-4, -4.865572880373637E-4, -4.865572880373652E-4, -4.865572880373653E-4, -4.8655728803737025E-4, -4.865572880373656E-4, -4.8655728803736976E-4, -4.865572880373661E-4, -4.8655728803736694E-4, -4.865572880373673E-4, -4.8655728803736694E-4, -4.8655728803736597E-4, -4.865572880373679E-4, -4.865572880373675E-4, -4.865572880373692E-4, -4.865572880373678E-4, -4.865572880373691E-4, -4.8655728803736814E-4, -4.865572880373695E-4, -4.8655728803736955E-4, -4.865572880373679E-4, -4.865572880373688E-4, -4.8655728803736835E-4, -4.865572880373689E-4, -4.8655728803736846E-4, -4.8655728803736694E-4, -4.865572880373659E-4)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(Vec(l: _*), 0.0) should equal()

    // }
    it("problem 3") {
      val l = Vector(8.548758013457909E-10, -3.5849248558001497E-12, -3.5849248558010738E-12, 9.904744379228371E-26, 8.286957018948269E-26, 6.995635967013343E-26, 6.510452968937413E-26, 5.337919152689837E-26, 4.494571764183192E-26, -1.7191997273630902E-26, 2.244138783035688E-26, 1.6684838145211635E-26, 1.4463980995094257E-26, 1.2915110729710551E-26, -8.623736495958642E-27, -5.618405903775037E-27, 7.405961068587071E-27, 7.072340856250538E-27, 5.218100888365195E-27, 4.1785941318305576E-27, -2.9403647380370672E-27, -1.851662089443567E-27, 7.240530743929987E-29, -5.7763296167456675E-28, -3.584924855800575E-12, -3.584924855800863E-12, -3.584924855800797E-12, -3.584924855800656E-12, -3.5849248558007765E-12, -3.584924855800689E-12, -3.584924855800766E-12, -3.584924855800679E-12, -3.5849248558006978E-12, -3.5849248558007563E-12, -3.5849248558006986E-12, -3.584924855800753E-12, -3.5849248558007466E-12, -3.5849248558007535E-12, -3.5849248558007034E-12, -3.584924855800696E-12, -3.5849248558007523E-12, -3.5849248558007083E-12, -3.5849248558007034E-12, -3.5849248558007107E-12, -3.5849248558006998E-12, -3.5849248558007474E-12, -3.584924855800714E-12, -3.584924855800709E-12, -3.584924855800746E-12, -3.5849248558007454E-12, -3.5849248558007386E-12, -3.584924855800743E-12, -3.584924855800743E-12, -3.584924855800742E-12, -3.5849248558007095E-12, -3.5849248558007466E-12, -3.5849248558007163E-12, -3.5849248558007426E-12, -3.5849248558007474E-12, -3.58492485580074E-12, -3.5849248558007503E-12, -3.58492485580071E-12, -3.584924855800719E-12, -3.5849248558007196E-12, -3.584924855800712E-12, -3.5849248558007155E-12, -3.584924855800708E-12, -3.5849248558007462E-12, -3.5849248558007163E-12, -3.584924855800706E-12, -3.584924855800742E-12, -3.5849248558007224E-12, -3.5849248558007414E-12, -3.5849248558007163E-12, -3.5849248558007523E-12, -3.5849248558007466E-12, -3.584924855800714E-12, -3.584924855800744E-12, -3.584924855800719E-12, -3.5849248558007196E-12, -3.5849248558006994E-12, -3.584924855800741E-12, -3.5849248558007115E-12, -3.584924855800739E-12, -3.5849248558007155E-12, -3.5849248558007515E-12, -3.584924855800737E-12, -3.5849248558007434E-12, -3.584924855800704E-12, -3.584924855800716E-12, -3.5849248558007083E-12, -3.5849248558007394E-12, -3.5849248558007196E-12, -3.5849248558007442E-12, -3.584924855800711E-12, -3.584924855800717E-12, -3.5849248558007454E-12, -3.584924855800713E-12, -3.584924855800734E-12, -3.584924855800735E-12, -3.58492485580072E-12, -3.5849248558007503E-12, -3.584924855800699E-12, -3.5849248558007188E-12, -3.584924855800739E-12, -3.5849248558007394E-12, -3.584924855800736E-12, -3.5849248558007345E-12, -3.5849248558007394E-12, -3.5849248558007046E-12, -3.5849248558007365E-12, -3.5849248558007454E-12, -3.584924855800735E-12, -3.5849248558007107E-12, -3.584924855800712E-12, -3.584924855800721E-12, -3.5849248558007143E-12, -3.5849248558007252E-12, -3.584924855800724E-12, -3.5849248558007204E-12, -3.5849248558007167E-12, -3.584924855800715E-12, -3.584924855800743E-12, -3.5849248558007075E-12, -3.584924855800742E-12, -3.5849248558007175E-12, -3.5849248558007507E-12, -3.5849248558007216E-12, -3.584924855800744E-12, -3.5849248558007365E-12, -3.584924855800718E-12, -3.584924855800737E-12, -3.5849248558007406E-12, -3.5849248558007414E-12, -3.58492485580074E-12, -3.5849248558007208E-12, -3.584924855800749E-12, -3.5849248558007406E-12, -3.584924855800735E-12, -3.584924855800724E-12, -3.5849248558007244E-12, -3.584924855800726E-12, -3.5849248558007232E-12, -3.5849248558007252E-12, -3.5849248558007244E-12, -3.5849248558007204E-12, -3.5849248558007232E-12, -3.5849248558007446E-12, -3.5849248558007398E-12, -3.5849248558007188E-12, -3.584924855800739E-12, -3.58492485580071E-12, -3.58492485580074E-12, -3.5849248558007365E-12, -3.5849248558007188E-12, -3.584924855800738E-12, -3.5849248558007147E-12, -3.5849248558007196E-12, -3.5849248558007357E-12, -3.584924855800714E-12, -3.584924855800737E-12, -3.5849248558007244E-12, -3.584924855800727E-12, -3.584924855800734E-12, -3.5849248558007252E-12, -3.5849248558007107E-12, -3.5849248558007204E-12, -3.5849248558007244E-12, -3.5849248558007325E-12, -3.584924855800723E-12, -3.584924855800718E-12, -3.584924855800714E-12, -3.584924855800739E-12, -3.5849248558007486E-12, -3.5849248558007188E-12, -3.5849248558007272E-12, -3.5849248558007236E-12, -3.584924855800718E-12, -3.584924855800739E-12, -3.5849248558007232E-12, -3.5849248558007317E-12, -3.584924855800743E-12, -3.5849248558007398E-12, -3.584924855800734E-12, -3.5849248558007252E-12, -3.584924855800723E-12, -3.5849248558007184E-12, -3.5849248558007155E-12, -3.584924855800735E-12, -3.584924855800715E-12, -3.5849248558007406E-12, -3.5849248558007446E-12, -3.584924855800722E-12, -3.584924855800741E-12, -3.5849248558007297E-12, -3.5849248558007236E-12, -3.5849248558007333E-12, -3.5849248558007365E-12, -3.584924855800727E-12, -3.584924855800723E-12, -3.5849248558007204E-12, -3.584924855800718E-12, -3.5849248558007276E-12, -3.5849248558007293E-12, -3.5849248558007285E-12, -3.5849248558007293E-12, -3.5849248558007305E-12, -3.584924855800721E-12, -3.584924855800731E-12, -3.5849248558007357E-12, -3.5849248558007357E-12, -3.584924855800733E-12, -3.584924855800737E-12, -3.5849248558007345E-12, -3.5849248558007357E-12, -3.584924855800735E-12, -3.584924855800716E-12, -3.584924855800718E-12, -3.5849248558007418E-12, -3.5849248558007373E-12, -3.584924855800719E-12, -3.584924855800735E-12, -3.5849248558007285E-12, -3.5849248558007325E-12, -3.584924855800731E-12, -3.5849248558007196E-12, -3.584924855800727E-12, -3.5849248558007236E-12, -3.5849248558007236E-12, -3.584924855800727E-12, -3.5849248558007236E-12, -3.5849248558007293E-12, -3.5849248558007276E-12, -3.58492485580073E-12, -3.5849248558007163E-12, -3.5849248558007232E-12, -3.58492485580073E-12, -3.5849248558007272E-12, -3.584924855800727E-12, -3.584924855800732E-12, -3.5849248558007293E-12, -3.5849248558007305E-12, -3.584924855800731E-12, -3.5849248558007333E-12, -3.5849248558007293E-12, -3.5849248558007272E-12, -3.584924855800732E-12, -3.5849248558007252E-12, -3.5849248558007285E-12, -3.5849248558007196E-12, -3.584924855800729E-12, -3.5849248558007204E-12, -3.584924855800723E-12, -3.584924855800722E-12, -3.584924855800717E-12, -3.5849248558007317E-12, -3.5849248558007285E-12, -3.5849248558007325E-12, -3.5849248558007276E-12, -3.5849248558007232E-12, -3.5849248558007252E-12, -3.5849248558007305E-12, -3.584924855800723E-12, -3.5849248558007357E-12, -3.5849248558007373E-12, -3.584924855800733E-12, -3.584924855800729E-12, -3.5849248558007184E-12, -3.584924855800715E-12, -3.5849248558007394E-12, -3.5849248558007224E-12, -3.5849248558007357E-12, -3.5849248558007276E-12, -3.584924855800724E-12, -3.5849248558007305E-12, -3.5849248558007293E-12, -3.5849248558007285E-12, -3.5849248558007244E-12, -3.584924855800726E-12, -3.584924855800725E-12, -3.5849248558007123E-12, -3.5849248558007204E-12, -3.584924855800725E-12, -3.584924855800731E-12, -3.5849248558007365E-12, -3.5849248558007353E-12, -3.584924855800731E-12, -3.584924855800727E-12, -3.5849248558007244E-12, -3.5849248558007285E-12, -3.5849248558007264E-12, -3.5849248558007244E-12, -3.5849248558007252E-12, -3.584924855800726E-12, -3.584924855800721E-12, -3.5849248558007394E-12, -3.584924855800722E-12, -3.58492485580072E-12, -3.584924855800735E-12, -3.584924855800734E-12, -3.5849248558007276E-12, -3.5849248558007297E-12, -3.584924855800729E-12, -3.5849248558007244E-12, -3.584924855800732E-12, -3.584924855800739E-12, -3.5849248558007377E-12, -3.5849248558007345E-12, -3.5849248558007357E-12, -3.5849248558007297E-12, -3.5849248558007208E-12, -3.584924855800718E-12, -3.5849248558007252E-12, -3.5849248558007317E-12, -3.5849248558007317E-12, -3.5849248558007232E-12, -3.5849248558007373E-12, -3.584924855800724E-12, -3.5849248558007418E-12, -3.584924855800727E-12, -3.5849248558007204E-12, -3.5849248558007317E-12, -3.584924855800734E-12, -3.5849248558007188E-12, -3.5849248558007285E-12, -3.584924855800733E-12, -3.5849248558007357E-12, -3.5849248558007196E-12, -3.584924855800734E-12, -3.584924855800721E-12, -3.5849248558007264E-12, -3.584924855800726E-12, -3.5849248558007357E-12, -3.5849248558007398E-12, -3.5849248558007454E-12, -3.5849248558007325E-12, -3.5849248558007325E-12, -3.5849248558007252E-12, -3.5849248558007167E-12, -3.5849248558007232E-12, -3.5849248558007333E-12, -3.5849248558007224E-12, -3.5849248558007325E-12, -3.584924855800733E-12, -3.5849248558007204E-12, -3.584924855800734E-12, -3.5849248558007232E-12, -3.584924855800725E-12, -3.584924855800726E-12, -3.584924855800733E-12, -3.58492485580072E-12, -3.5849248558007272E-12, -3.5849248558007285E-12, -3.5849248558007317E-12, -3.584924855800729E-12, -3.5849248558007305E-12, -3.584924855800729E-12, -3.58492485580073E-12, -3.5849248558007293E-12, -3.5849248558007297E-12, -3.5849248558007264E-12, -3.584924855800727E-12, -3.5849248558007285E-12, -3.5849248558007224E-12, -3.584924855800728E-12, -3.5849248558007224E-12, -3.584924855800729E-12, -3.584924855800726E-12, -3.5849248558007345E-12, -3.5849248558007293E-12, -3.584924855800733E-12, -3.584924855800731E-12, -3.5849248558007345E-12, -3.5849248558007256E-12, -3.5849248558007337E-12, -3.5849248558007236E-12, -3.584924855800728E-12, -3.58492485580073E-12, -3.5849248558007317E-12, -3.584924855800732E-12, -3.5849248558007276E-12, -3.5849248558007333E-12, -3.584924855800727E-12, -3.58492485580073E-12, -3.5849248558007337E-12, -3.5849248558007357E-12, -3.584924855800729E-12, -3.584924855800725E-12, -3.5849248558007276E-12, -3.58492485580073E-12, -3.584924855800733E-12, -3.584924855800736E-12, -3.58492485580073E-12, -3.5849248558007285E-12, -3.584924855800728E-12, -3.5849248558007297E-12, -3.5849248558007272E-12, -3.584924855800725E-12, -3.5849248558007297E-12, -3.5849248558007293E-12, -3.58492485580073E-12, -3.584924855800728E-12, -3.584924855800731E-12, -3.5849248558007293E-12, -3.5849248558007272E-12, -3.58492485580073E-12, -3.5849248558007276E-12, -3.5849248558007293E-12, -3.5849248558007305E-12, -3.58492485580073E-12, -3.584924855800731E-12)

      GlobalTest.linCombChiSquaresCumulativeLiu2009(Vec(l: _*), 0.0) should equal()

    }
    // it("examples") {
    //   val rand = new Well44497b(1)
    //   val rv = Vec(1 to 2000 map (i => rand.nextGaussian): _*)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(rv, 1000.0) should equal(0.0013237732244912603)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(rv, 100.0) should equal(0.0013237732244912603)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(Vec(6, 3, 1), 1.0) should equal(1.0)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(Vec(0.6, 0.3, 0.1), 2.0) should equal(0.1261873406750991)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(Vec(-6, 3, 1), 2.0) should equal(0.27971102950879706)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(rv, 200.0) should equal(2.2430102665196472E-6)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(rv, 400.0) should equal(4.287044795492789E-15)
    //   GlobalTest.linCombChiSquaresCumulativeLiu2009(rv, 1000.0) should equal(9.306562246060629E-57)

    // }
  }

  // describe("quadratic ratio of normals") {
  //   it("imhof") {
  //     val rand = new Well44497b(1)
  //     val rnd = new RandomDataGenerator(rand)

  //     val numSamples = 100
  //     val numFeatures = 10
  //     def simulateRandomColumn(sd: Double): Vec[Double] = Vec(1 to numSamples map (i => new RandomDataGenerator(rand).nextGaussian(0.0, sd)): _*)
  //     val a = Mat(1 to numFeatures map (i => simulateRandomColumn(1.0)): _*)
  //     val b = Mat(1 to numFeatures map (i => simulateRandomColumn(1.0)): _*)
  //     val A = a mult a.T
  //     val B = b mult b.T

  //     val sample = 1 to 10 map { i =>
  //       val u = Vec(0 until numSamples map (j => rnd.nextGaussian(0.0, 1.0)): _*)
  //       ((u.T mult A mult u) / (u.T mult B mult u)).raw(0, 0)
  //     }

  //     val ps = sample.map(q => linCombChiSquaresCumulativeImhof(GlobalTest.quadraticRatio(A, B, q), 0.0))
  //     // mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))
  //     ps should equal(Vector(0.5210745237041904, 0.5997201507657532, 0.9509244719184909, 0.18452557355213825, 0.4176566366113617, 0.14438105775985954, 0.09582020574818602, 0.22041461021794315, 0.6229825703740977, 0.17878734926355672))

  //   }
  //   it("liu") {
  //     val rand = new Well44497b(1)
  //     val rnd = new RandomDataGenerator(rand)

  //     val numSamples = 100
  //     val numFeatures = 10
  //     def simulateRandomColumn(sd: Double): Vec[Double] = Vec(1 to numSamples map (i => new RandomDataGenerator(rand).nextGaussian(0.0, sd)): _*)
  //     val a = Mat(1 to numFeatures map (i => simulateRandomColumn(1.0)): _*)
  //     val b = Mat(1 to numFeatures map (i => simulateRandomColumn(1.0)): _*)
  //     val A = a mult a.T
  //     val B = b mult b.T

  //     val sample = 1 to 10 map { i =>
  //       val u = Vec(0 until numSamples map (j => rnd.nextGaussian(0.0, 1.0)): _*)
  //       ((u.T mult A mult u) / (u.T mult B mult u)).raw(0, 0)
  //     }

  //     val ps = sample.map(q => linCombChiSquaresCumulativeLiu2009(GlobalTest.quadraticRatio(A, B, q), 0.0))
  //     // mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))
  //     ps should equal(Vector(0.5213508447433165, 0.5996553702314619, 0.9514506037286483, 0.18464298524833672, 0.4180992883601204, 0.14416861814290424, 0.09427985549718851, 0.22197231610238977, 0.6229966993665426, 0.17887663304190685))
  //   }
  // }

  // describe("linear combination of chi squares, qq plot ") {

  //   it("Liu 2009 + ") {
  //     val rand = new Well44497b(2)
  //     val rnd = new RandomDataGenerator(rand)
  //     val chi2 = new org.apache.commons.math3.distribution.ChiSquaredDistribution(rand, 1.0)
  //     val ls = Vec(1 to 50 map (i => rand.nextDouble * 10): _*)
  //     val sample = 1 to 100 map (i => (Vec(chi2.sample(ls.length): _*).T mult ls).col(0) sum)
  //     val ps = sample.map(q => GlobalTest.positiveLinCombChiSquaresCumulativeLiu2009(ls, q))
  //     ps should equal(Vector(0.44831721200252994, 0.47909139778888415, 0.6285128018614498, 0.8056773130948957, 0.7609239049151167, 0.2419347023442906, 0.49204743832518366, 0.441084195950958, 0.3978310349424054, 0.3274954037365609, 0.97798386064292, 0.22145597418574942, 0.7211938626286833, 0.9285105982379402, 0.883437494059915, 0.29211261930049087, 0.9467718115442151, 0.8422714535400363, 0.05883192270904118, 0.5635522280466789, 0.9223302338776528, 0.5876276784715826, 0.2612315098426341, 0.5548905201264459, 0.8203812020636668, 0.568416428336542, 0.14093653068398787, 0.8001082685091446, 0.054531861809635575, 0.1091127709928375, 0.17269789642340352, 0.2970990443670487, 0.6631639425192377, 0.5206286361995222, 0.807602754469448, 0.1416825784787686, 0.5767337781700553, 0.9243110223441067, 0.2716240954593245, 0.4071449770020915, 0.42920165302877133, 0.16295795694902643, 0.39297999575060627, 0.7216251664297355, 0.7213240665393728, 0.6081906075079433, 0.3566722526099195, 0.9437015871255546, 0.9404830464860237, 0.45706999498345374, 0.4798338243182404, 0.6478764048671348, 0.8506666045774536, 0.24133687947185417, 0.2480809340773285, 0.47162999259152877, 0.18065108175289618, 0.23944688920318968, 0.562130700720249, 0.8106851056476333, 0.458250159059301, 0.3273536459720702, 7.128559507785885E-4, 0.38159675371002405, 0.5875976067525344, 0.03720294980135925, 0.2981886986423505, 0.5970490825702336, 0.48050949611895105, 0.841285834307024, 0.7931763149028181, 0.56149540774836, 0.7977160547228905, 0.5890262220856732, 0.5772438948925311, 0.30280486344693447, 0.2585235750092011, 0.28020698455841686, 0.927897116132235, 0.5414555135677592, 0.7924749951202402, 0.6257354157125101, 0.4939827401595773, 0.25833031867120737, 0.27298207812703196, 0.4190157344451266, 0.17424802146531496, 0.17551197229431356, 0.10482367304659064, 0.5049237974368659, 0.6161658990938157, 0.7199231581912395, 0.9258313112824774, 0.32581037452299844, 0.43961238329007235, 0.9980609608794005, 0.2834021364996876, 0.30277720416241316, 0.1612555274856634, 0.026917963317640663))
  //     // mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))

  //   }

  //   it("Liu 2009 +- ") {
  //     val rand = new Well44497b(2)
  //     val rnd = new RandomDataGenerator(rand)
  //     val chi2 = new org.apache.commons.math3.distribution.ChiSquaredDistribution(rand, 1.0)
  //     val ls = Vec(1 to 50 map (i => rand.nextGaussian * 10): _*)
  //     val sample = 1 to 10 map (i => (Vec(chi2.sample(ls.length): _*).T mult ls).col(0) sum)
  //     val ps = sample.map(q => GlobalTest.linCombChiSquaresCumulativeLiu2009(ls, q))
  //     ps should equal(Vector(0.6930093406765823, 0.9665849121365991, 0.02338443020735014, 0.6534047692092289, 0.6856487427748729, 0.3353576042605812, 0.7578959552964087, 0.7834582908931517, 0.736881695738752, 0.6420063883817935))
  //     // mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))

  //   }

  //   it("Imhof  +-") {
  //     val rand = new Well44497b(2)
  //     val rnd = new RandomDataGenerator(rand)
  //     val chi2 = new org.apache.commons.math3.distribution.ChiSquaredDistribution(rand, 1.0)
  //     val ls = Vec(1 to 50 map (i => rand.nextGaussian * 10): _*)
  //     val sample = 1 to 10 map (i => (Vec(chi2.sample(ls.length): _*).T mult ls).col(0) sum)
  //     val ps = sample.map(q => GlobalTest.linCombChiSquaresCumulativeImhof(ls, q))
  //     ps should equal(Vector(0.6934389436792125, 0.9667549840574586, 0.02330835814981703, 0.6538210725819352, 0.686057749917786, 0.3351889393917112, 0.7530632897052548, 0.7843842751971066, 0.7376236857974227, 0.6423693971086933))
  //     // mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))
  //   }

  // }

  // describe("test linear + imhof") {

  //   it("against R example") {
  //     val fX = (getClass.getResource("/").getPath + "/globaltest/test.X.txt")
  //     val fY = (getClass.getResource("/").getPath + "/globaltest/test.Y.txt")
  //     val x: Mat[Double] = openSource(fX)(s => Mat(s.getLines.map(x => Vec(x.split("\\s+").map(_.toDouble).toSeq: _*)).toSeq: _*)).T
  //     val y: Vec[Double] = openSource(fY)(s => Mat(s.getLines.map(x => Vec(x.split("\\s+").map(_.toDouble): _*)).toSeq: _*)).row(0)

  //     linCombChiSquaresCumulativeImhof(test_linear(
  //       design = x.col(0, 1, 2),
  //       condition = Mat(vec.ones(x.numRows)),
  //       outcome = y
  //     )._2, 0) should equal(2.29585353269134E-6)

  //   }

  //   it("null distribution") {
  //     val rand = new Well44497b(1)

  //     val numSamples = 100
  //     val numFeatures = 10
  //     def simulateRandomColumn(sd: Double): Vec[Double] = Vec(1 to numSamples map (i => new RandomDataGenerator(rand).nextGaussian(0.0, sd)): _*)
  //     val x = Mat(1 to numFeatures map (i => simulateRandomColumn(1.0)): _*)

  //     def makeY(x: Mat[Double], effectSize: Double): Vec[Double] = {
  //       Vec(0 until x.numRows map { i => new RandomDataGenerator(rand).nextGaussian(0.0, 1.0) + effectSize * x.raw(i, 0)
  //       }: _*)
  //     }

  //     val n = 10
  //     val effectSize = 0.0
  //     val ps = 1 to n map { i =>
  //       val yy = makeY(x, effectSize)

  //       linCombChiSquaresCumulativeImhof(test_linear(
  //         design = x,
  //         condition = Mat(vec.ones(numSamples)),
  //         outcome = yy
  //       )._2, 0)
  //     }
  //     // mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))
  //     ps should equal(Vector(0.43857226395157495, 0.8848177917506089, 0.4327961374438983, 0.7503685959031194, 0.10385862943055146, 0.027039103453911636, 0.627162732693097, 0.6300013020522113, 0.32189503160952393, 0.1542129499052879))

  //   }

  // }

  // describe("test logistic + imhof") {

  //   it("against R example") {
  //     val fX = (getClass.getResource("/").getPath + "/globaltest/test.X.txt")
  //     val fY = (getClass.getResource("/").getPath + "/globaltest/test.Y.txt")
  //     val x: Mat[Double] = openSource(fX)(s => Mat(s.getLines.map(x => Vec(x.split("\\s+").map(_.toDouble).toSeq: _*)).toSeq: _*)).T
  //     val y: Vec[Boolean] = openSource(fY)(s => Mat(s.getLines.map(x => Vec(x.split("\\s+").map(_.toDouble): _*)).toSeq: _*)).row(0).map(_ > 0.0)

  //     linCombChiSquaresCumulativeImhof(test_logistic(
  //       design = x.col(0, 1, 2),
  //       condition = Mat(vec.ones(x.numRows)),
  //       outcome = y
  //     )._2, 0) should equal(0.006325951840485282)

  //   }

  //   it("null distribution") {
  //     val rand = new Well44497b(1)

  //     val numSamples = 100
  //     val numFeatures = 10
  //     def simulateRandomColumn(sd: Double): Vec[Double] = Vec(1 to numSamples map (i => new RandomDataGenerator(rand).nextGaussian(0.0, sd)): _*)
  //     val x = Mat(1 to numFeatures map (i => simulateRandomColumn(1.0)): _*)

  //     def makeY(x: Mat[Double], effectSize: Double): Vec[Boolean] = {
  //       Vec(0 until x.numRows map { i => new RandomDataGenerator(rand).nextGaussian(0.0, 1.0) + effectSize * x.raw(i, 0)
  //       }: _*).map(_ >= 0.0)
  //     }

  //     val n = 10
  //     val effectSize = 0.0
  //     val ps = 1 to n map { i =>
  //       val yy = makeY(x, effectSize)

  //       linCombChiSquaresCumulativeImhof(test_logistic(
  //         design = x,
  //         condition = Mat(vec.ones(numSamples)),
  //         outcome = yy
  //       )._2, 0)
  //     }
  //     ps should equal(Vector(0.6824361869817095, 0.9349728278460899, 0.1377470800014839, 0.3951972967670985, 0.37015834752785576, 0.003671361114043335, 0.8672774423599412, 0.8346235485718778, 0.48622910669706515, 0.18535730214191226))

  //     // mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))

  //   }

  // }

  // describe("test linear + liu") {

  //   it("against R example") {
  //     val fX = (getClass.getResource("/").getPath + "/globaltest/test.X.txt")
  //     val fY = (getClass.getResource("/").getPath + "/globaltest/test.Y.txt")
  //     val x: Mat[Double] = openSource(fX)(s => Mat(s.getLines.map(x => Vec(x.split("\\s+").map(_.toDouble).toSeq: _*)).toSeq: _*)).T
  //     val y: Vec[Double] = openSource(fY)(s => Mat(s.getLines.map(x => Vec(x.split("\\s+").map(_.toDouble): _*)).toSeq: _*)).row(0)

  //     linCombChiSquaresCumulativeLiu2009(test_linear(
  //       design = x.col(0, 1, 2),
  //       condition = Mat(vec.ones(x.numRows)),
  //       outcome = y
  //     )._2, 0) should equal(2.3125973936873637E-6)

  //   }

  //   it("null distribution") {
  //     val rand = new Well44497b(1)

  //     val numSamples = 100
  //     val numFeatures = 10
  //     def simulateRandomColumn(sd: Double): Vec[Double] = Vec(1 to numSamples map (i => new RandomDataGenerator(rand).nextGaussian(0.0, sd)): _*)
  //     val x = Mat(1 to numFeatures map (i => simulateRandomColumn(1.0)): _*)

  //     def makeY(x: Mat[Double], effectSize: Double): Vec[Double] = {
  //       Vec(0 until x.numRows map { i => new RandomDataGenerator(rand).nextGaussian(0.0, 1.0) + effectSize * x.raw(i, 0)
  //       }: _*)
  //     }

  //     val n = 10
  //     val effectSize = 0.0
  //     val ps = 1 to n map { i =>
  //       val yy = makeY(x, effectSize)

  //       linCombChiSquaresCumulativeLiu2009(test_linear(
  //         design = x,
  //         condition = Mat(vec.ones(numSamples)),
  //         outcome = yy
  //       )._2, 0)
  //     }
  //     // mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))
  //     ps should equal(Vector(0.43710275406805105, 0.8862486449376974, 0.43138896381115244, 0.7479442103621001, 0.1047845265391172, 0.02728673499534612, 0.6243807128469048, 0.6272132294242175, 0.3171313093564148, 0.15511786202369368))

  //   }

  // }

  // describe("test logistic + liu") {

  //   it("against R example") {
  //     val fX = (getClass.getResource("/").getPath + "/globaltest/test.X.txt")
  //     val fY = (getClass.getResource("/").getPath + "/globaltest/test.Y.txt")
  //     val x: Mat[Double] = openSource(fX)(s => Mat(s.getLines.map(x => Vec(x.split("\\s+").map(_.toDouble).toSeq: _*)).toSeq: _*)).T
  //     val y: Vec[Boolean] = openSource(fY)(s => Mat(s.getLines.map(x => Vec(x.split("\\s+").map(_.toDouble): _*)).toSeq: _*)).row(0).map(_ > 0.0)

  //     linCombChiSquaresCumulativeLiu2009(test_logistic(
  //       design = x.col(0, 1, 2),
  //       condition = Mat(vec.ones(x.numRows)),
  //       outcome = y
  //     )._2, 0) should equal(0.004922370170005061)

  //   }

  //   it("null distribution") {
  //     val rand = new Well44497b(1)

  //     val numSamples = 100
  //     val numFeatures = 10
  //     def simulateRandomColumn(sd: Double): Vec[Double] = Vec(1 to numSamples map (i => new RandomDataGenerator(rand).nextGaussian(0.0, sd)): _*)
  //     val x = Mat(1 to numFeatures map (i => simulateRandomColumn(1.0)): _*)

  //     def makeY(x: Mat[Double], effectSize: Double): Vec[Boolean] = {
  //       Vec(0 until x.numRows map { i => new RandomDataGenerator(rand).nextGaussian(0.0, 1.0) + effectSize * x.raw(i, 0)
  //       }: _*).map(_ >= 0.0)
  //     }

  //     val n = 10
  //     val effectSize = 0.0
  //     val ps = 1 to n map { i =>
  //       val yy = makeY(x, effectSize)

  //       linCombChiSquaresCumulativeLiu2009(test_logistic(
  //         design = x,
  //         condition = Mat(vec.ones(numSamples)),
  //         outcome = yy
  //       )._2, 0)
  //     }
  //     // mybiotools.plots.show(mybiotools.plots.QQPlot.plot(ps.iterator))

  //     ps should equal(Vector(0.6795882308891361, 0.9385571517134395, 0.13866886234673015, 0.3941276627673757, 0.36937347623414607, 0.0035784577090676563, 0.868104684177965, 0.8344425909850751, 0.48422754574411375, 0.1860959522649159))

  //   }

  // }

}