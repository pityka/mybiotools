/* 
* The MIT License
*
* Copyright (c) 2015 ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland, 
* Group Fellay
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation 
* the rights to use, copy, modify, merge, publish, distribute, sublicense, 
* and/or sell copies of the Software, and to permit persons to whom the Software
* is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
* SOFTWARE.
*/

package mybiotools.sequence.alignment

import org.scalatest.FunSuite
import org.scalatest.Matchers
import collection.immutable.HashMap
import mybiotools.stringstore._

class PairwiseAlignmentSpec extends FunSuite {

  test("longest common subsequence") {
    assertResult(LongestCommonSubstring.longestCommonSubstring("AACCTTGG", "ACACTGTGA"))("AACTTG")
  }

  test("global affine alignment") {
    val blosum = {
      val lines = io.Source.fromFile(getClass.getResource("/").getPath + "BLOSUM62.txt").getLines.toList.map(_.split("\\s+"))
      lines.tail.zipWithIndex.flatMap {
        case (line, i2) =>
          lines.head.drop(1).zipWithIndex.map {
            case (c1, i1) =>
              val c2 = line.head
              val score = line.tail(i1)
              (c1.charAt(0), c2.charAt(0)) -> score.toInt
          }
      }.toMap
    }
    assertResult(GlobalPairwiseAlignment.globalAffineAlignment("PRTEINS", "PRTWPSEIN", blosum, 11, 1))(8, "PRT---EINS", "PRTWPSEIN-")
    assertResult(GlobalPairwiseAlignment.globalAffineAlignment("YHFDVPDCWAHRYWVENPQAIAQMEQICFNWFPSMMMKQPHVFKVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE", "YHEDVAHEDAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPIISATCARMRVRTVWE", blosum, 11, 1))(144, "YHFDVPDCWAHRYWVENPQAIAQME-------QICFNWFPSMMMK-------QPHVF---KVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE", "YHEDV----AHE------DAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPI----ISATCARMRVRTVWE")

  }
  test("stamatakis") {

    val score = Map(('A', 'B') -> 5)

    assertResult(GlobalPairwiseAlignment.globalAlignment("A", "B", score, 2, 1))((5, "A", "B"))

  }

  test("stamatakis2") {

    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 0
          else -1)
        }
      }
    }.toMap

    assertResult(GlobalPairwiseAlignment.globalAlignment("AAAGGG", "TTAAAAGGGGTT", score, 5, 1))((-14, "AAA------GGG", "TTAAAAGGGGTT"))

  }
  test("global alignment") {
    val blosum = {
      val lines = io.Source.fromFile(getClass.getResource("/").getPath + "BLOSUM62.txt").getLines.toList.map(_.split("\\s+"))
      lines.tail.zipWithIndex.flatMap {
        case (line, i2) =>
          lines.head.drop(1).zipWithIndex.map {
            case (c1, i1) =>
              val c2 = line.head
              val score = line.tail(i1)
              (c1.charAt(0), c2.charAt(0)) -> score.toInt
          }
      }.toMap
    }

    assertResult(GlobalPairwiseAlignment.globalAlignment("ILYPRQSMICMSFCFWDMWKKDVPVVLMMFLERRQMQSVFSWLVTVKTDCGKGIYNHRKYLGLPTMTAGDWHWIKKQNDPHEWFQGRLETAWLHSTFLYWKYFECDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIWMATDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVKNYMMAPVVNDPMIEAFYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMNTDPHYCQTHVCWISAMFPIYSPFYTSGPKEFYMWLQARIDQNMHGHANHYVTSGNWDSVYTPEKRAGVFPVVVPVWYPPQMCNDYIKLTYECERFHVEGTFGCNRWDLGCRRYIIFQCPYCDTMKICYVDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEWCNQPVLAKFVRSKIVAICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPTSHYVFMRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHHRRAFRAELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA", "ILIPRQQMGCFPFPWHFDFCFWSAHHSLVVPLNPQMQTVFQNRGLDRVTVKTDCHDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLYKKTEYCLVRHSNCCHCDWDQIIHTCAFIAFLDLYQRHWPMCDKLYCHFHHSWFCRNQEMSMDWNQWFPWDSVPRANCLEEGALIALYAGIWANSMKRDMKTDHACTVRLIYVCELHAWLKYCYTSINMLCGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQGICPVERKSHCEIYAKDLLSFESCCSQKQNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRPPKEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSYKLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWACEAQTNVCERMLNNQHVAVKRNVTFWWQMVPNCLWSCHNKMTWPTRPEQHRLFFVKMRLKCMHEYLDVAPSDFCRNMQAYMHSMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGYIYDQSLQVVSCEGCSYYADCYVKCINVKEKCMFA", blosum, 5, 5))((1555, "ILYPRQSMICMSFCF-WDM--WKKDVPVVLMMFLERRQMQSVF-S-WL--VTVKTDCGKGIYNHR-K--Y-LGLPTMTAGDWHWIKK---Q-NDPHEWFQGRLETAWLHSTFLYWKYFE-CDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIW---MA----TDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVKN-YMMAPVVNDPMIEA--FYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMN-TDPH----Y--CQTHVCW-ISAMF-PIYSPFYT--SG-PKEFYMW---LQARI-DQNM---HGHANHYV-TSGNWDSVYTPEKRA--G--V-FP-V-V-------VPVWYPPQMCN--D-YIKLTYEC--E---RFHVEGTFGCNRWD-L-GCRR--YII--FQCPYCDTMKI---CY--VDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEW-----CNQPVLAKFVRSKIVA---ICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPT--S-HYVF---MRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHH-RRAFRA----ELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA", "ILIPRQQMGCFPFPWHFDFCFWSAHHSLVVP--LNP-QMQTVFQNRGLDRVTVKTDC----HDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLY-KKTEYC-LVR---HS-NCC-HCDWDQIIHTCAF-----IAFLDLYQRHWPMCDKLY------C---HFHHSWFCRNQEMSM--D---W---------N--Q---WFP-------WDSV-P-RANCLE-EGALIALYAGIWANSMKRDMKTDHACT--VRLIYVCELHAWLK-YCYTSINML-CGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQ------GICPVERKSHCEIYAKDLLSFESCCSQK-QNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRPP-KEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSY-KLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWA-C---EA---QTNVCERMLN-NQHVAV-KRNVTFWWQMVPNC----LWSCHNKMTWPTRPEQHRLFFVKMRLKCMH-----EYLD--VAPS--DFCRNMQAYMH-------SMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGY-I--------YDQSLQVVSCEGCSYYADCYVKCI-NVKEKCMFA"))

  }
  test("edit distance") {
    assertResult(GlobalPairwiseAlignment.editDistance("PLEASANTLY", "MEANLY"))(5)
    assertResult(GlobalPairwiseAlignment.editDistance("AAGA", "AA-A"))(1)
    assertResult(GlobalPairwiseAlignment.editDistance("AAGA", "AAGA"))(0)
    assertResult(GlobalPairwiseAlignment.editDistance("GGACRNQMSEVNMWGCWWASVWVSWCEYIMPSGWRRMKDRHMWHWSVHQQSSPCAKSICFHETKNQWNQDACGPKVTQHECMRRRLVIAVKEEKSRETKMLDLRHRMSGRMNEHNVTLRKSPCVKRIMERTTYHRFMCLFEVVPAKRQAYNSCDTYTMMACVAFAFVNEADWWKCNCAFATVPYYFDDSCRMVCGARQCYRLWQWEVNTENYVSIEHAEENPFSKLKQQWCYIPMYANFAWSANHMFWAYIANELQLDWQHPNAHPIKWLQNFLMRPYHPNCGLQHKERITPLHKSFYGMFTQHHLFCKELDWRIMAHANRYYCIQHGWHTNNPMDPIDTRHCCMIQGIPKRDHHCAWSTCDVAPLQGNWMLMHHCHHWNRVESMIQNQHEVAAGIKYWRLNRNGKLPVHTADNYGVLFQRWWFLGWYNFMMWHYSLHFFAVNFYFPELNAGQMPRFQDDQNRDDVYDTCIWYFAWSNTEFMEVFGNMMMYSRPMTKMGFHGMMLPYIAINGLRSISHVNKGIGPISGENCNLSTGLHHYGQLRMVMCGYCTPYRTEVKNQREMISAVHCHQHIDWRWIWCSGHWFGSNKCDLRIEDLQNYEPAKNKSNWPYMKECRKTEPYQDNIETMFFHQHDLARDSGYIANGWHENCRQHQDFSNTFAGGHKGTPKGEHMRRSLYVWDTDCVEKCQWVPELFALCWWTPLPDGVPVMLGTYRQYMFGLVVLYWFEVKYSCHNSWDYYNFHEGTMKDSDPENWCFWGMQIIQFHDHGKPEFFQDPMKQIIKTECTAYNSFMMGHIGKTTIVYLVSYIGRLWMKSCCLTWPPYATAPIKWAEETLLDFGQGPHPKYACHFTHQNMIRLAKLPMYWLWKLMFHE", "GMWGFVQVSTQSRFRHMWHWSVHQQSSECAKSICHHEWKNQWNQDACGPKVTQHECMANMPMHKCNNWFWRLVIAVKEEKVRETKMLDLIHRHWLVLNQGRMNEHNVTLRKSPCVKRIMHKWKSRTTFHRFMCLMASEVVPAKRGAQCWRQLGTYATYTVYTMMACVAFAFEYQQDNDNEADWWKCNCAFVPVYFDDSCRPVVGAFQCYRLGLPFGTGWNYAEENPFSKLKQQMHRKTMGECKNMMIWAYCANELQLPIKWGSMYHEHDFQLPPYHPNRFHKIRITILHKSFYGMFTQHHLFCKELDWRIMAWANRYYCIQHGWHTNNPDDPITRHKCMIQGGQNSRNADIRHMPVQCGNWGHAIGLEMPMPMHHCHHANRVESMIQTQHYWGPKLNRNADWWFLGWQNFEIFRMPILRWMGAYEWHYSLHFFAVNFYFPELNAGQMPRFQDDQNNNACYDVWAWSNTEFMEVNGIKKLRFGNMMMYSRPMTKMGFHGMMKSRSISHVNKGIGPISGENCSTGLHHYGQLTEVKNQREMISAVHCHQHIWCKCDLRIEPAKNKGYWPYQKEFCWRKQINSRKTEPYQVAPVINIETMFFDFWYIANGMHENCRRTGHKPNPDCVEKCQWVPELFALCWWRAMPDGVPVMLGTMFGLVVYWFEVKYSCHNSLYRRVTDYYNFHEGTMKDHEVPWNWDNEHCHDHGKAEFFFQMLKIPICDPMKAIIPSTEMVNTPWHPFSFMMGHDGKTTIVYSGSYIGRLWVPSRWKPYAPANWKMPIKWAEETLLMVPHPHFTHQQLWGTTLRLAKLPMYWLWKLMFHHLFGVK"))(400)
  }

  test("localAlignment") {
    val blosum = {
      val lines = io.Source.fromFile(getClass.getResource("/").getPath + "PAM250_1.txt").getLines.toList.map(_.split("\\s+"))
      lines.tail.zipWithIndex.flatMap {
        case (line, i2) =>
          lines.head.drop(1).zipWithIndex.map {
            case (c1, i1) =>
              val c2 = line.head
              val score = line.tail(i1)
              (c1.charAt(0), c2.charAt(0)) -> score.toInt
          }
      }.toMap
    }
    assertResult(LocalPairwiseAlignment.localAlignment("MEANLY", "PENALTY", blosum, 5))((15, "EANL-Y", "ENALTY"))

  }

  test("fitting alignment") {
    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 1
          else -1)
        }
      }
    }.toMap
    assertResult(FittingPairwiseAlignment.fittingAlignment("CAATCACCCCAATCCCTCAATCCTGGCCCCACGCATAGGCTAATGCCAATCGCGGCCAGGGTATAACCGCCATAACTGTGGGTCAGAAGGGATAAGTTCCACAATCCTATTTTCCTCGAGGCGCTTCGATGCGTTAACGCGTACACTCTGTCGGCCAACCGTGTGGGAGCCGAATTGGCTGGGCTGTTGAACATTCTATCAGTAGATAAACGAAGGTACATCCGAGGTTGTCGATCGACCGCGGGGTCGTAGCGCGTGCATGTTCCTTTCAGGCCCACATACTCCGGAACGGTTCATATCACGACTATTCTTGCACAATCGGACAACGGTGTACCATGGTGGACACCGTAGGAGACCAATACTGCGTAAATCATAAGCATTGGAGAGTGGACTGCTAGCGAGGCTCACCATGGAGTCTCGGTCGGCATCTCCTGACTGCTGTTCCATCGCGTTTTTCTTTTACTCACGCAATAAATCAATACCCCCTAACACAGGCCTGCTCCAGCCTTATTAAGGCCATAGTAGCTCTACATGTAGACCGAACGGAAGCACAGTTTGGTAGAAATTCTTAATCGACTATGGTCCGTGCAGGCCAAAAAAGGAATAATCTTCGAATTCTCACGCCTTCATTAGGGCGCACATGGTGGGGTAAATCACTGCACTCTGTTCGCAGTTAAGCGTTGCAATCAATATCGGCAGAACTCGGAGTCCGTATAAAGCCGCCTCAGCGTGCACACGCCCGTGCGGCACGTCATTAGACGAGGATTCCGGGGGACTGGCCTGTTCGTAATCCACTAAAACAATGGTCCTACCATCTAAAACGCACCGTGTTCCCCTCTACGGGAACCCCCTAGAT", "AGAGCGCAGAGAAGTCATTAGAACATGTAGCACATCGCTTATTAAGGGTCAATACCTAAAGGGCCTAACTATACGCCACACGGAACAGCTC", score, 1))((22, "AGGGCGCACATG--GTGGGGTA-AATCAC-T-GCAC-TCTG-TTCGCAGTTAAGCGTTGCAATCAATATCGGC-AGAACTCGGAGTCCGTA--TAAAGCCGCCTCAGCGTGCACACGC-C", "AGAGCGCAGA-GAAGTCAT-TAGAA-CATGTAGCACATC-GCTT---A-TTAAG-G--G---TCAATA-C--CTA-AA---GG-G-CC-TAACTATA-C-GCCACA-CG-GAACA-GCTC"))
  }

  test("fitting affine alignment") {
    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 1
          else -1)
        }
      }
    }.toMap
    assertResult(FittingPairwiseAlignment.fittingAffineAlignment("CAATCACCCCAATCCCTCAATCCTGGCCCCACGCATAGGCTAATGCCAATCGCGGCCAGGGTATAACCGCCATAACTGTGGGTCAGAAGGGATAAGTTCCACAATCCTATTTTCCTCGAGGCGCTTCGATGCGTTAACGCGTACACTCTGTCGGCCAACCGTGTGGGAGCCGAATTGGCTGGGCTGTTGAACATTCTATCAGTAGATAAACGAAGGTACATCCGAGGTTGTCGATCGACCGCGGGGTCGTAGCGCGTGCATGTTCCTTTCAGGCCCACATACTCCGGAACGGTTCATATCACGACTATTCTTGCACAATCGGACAACGGTGTACCATGGTGGACACCGTAGGAGACCAATACTGCGTAAATCATAAGCATTGGAGAGTGGACTGCTAGCGAGGCTCACCATGGAGTCTCGGTCGGCATCTCCTGACTGCTGTTCCATCGCGTTTTTCTTTTACTCACGCAATAAATCAATACCCCCTAACACAGGCCTGCTCCAGCCTTATTAAGGCCATAGTAGCTCTACATGTAGACCGAACGGAAGCACAGTTTGGTAGAAATTCTTAATCGACTATGGTCCGTGCAGGCCAAAAAAGGAATAATCTTCGAATTCTCACGCCTTCATTAGGGCGCACATGGTGGGGTAAATCACTGCACTCTGTTCGCAGTTAAGCGTTGCAATCAATATCGGCAGAACTCGGAGTCCGTATAAAGCCGCCTCAGCGTGCACACGCCCGTGCGGCACGTCATTAGACGAGGATTCCGGGGGACTGGCCTGTTCGTAATCCACTAAAACAATGGTCCTACCATCTAAAACGCACCGTGTTCCCCTCTACGGGAACCCCCTAGAT", "AGAGCGCAGAGAAGTCATTAGAACATGTAGCACATCGCTTATTAAGGGTCAATACCTAAAGGGCCTAACTATACGCCACACGGAACAGCTC", score, 1, 1))((22, "AGGGCGCACATG--GTGGGGTA-AATCA-CT-GCAC-TCTG-TTCGCAGTTAAGCGTTGCAATCAATATCGGC-AGAACTCGGAGTCCGTA--TAAAGCCGCCTCAGCGTGCACACGC-C", "AGAGCGCAGA-GAAGT-CATTAGAA-CATGTAGCACATC-GCTT---A-TTAAG-G--G---TCAATA-C--CTA-AA---GG-G-CC-TAACTATA--CGCCACA-CG-GAACA-GCTC"))

    assertResult(FittingPairwiseAlignment.fittingAffineAlignment("AAAATTTAAAA", "TTT", score, 1, 1))(3, "TTT", "TTT")
    assertResult(FittingPairwiseAlignment.fittingAffineAlignment("AAAATTTGGGTTTTAAAA", "TTTCCCTTTT", score.mapValues(_ * 10), 1, 1))(64, "TTT---GGGTTTT", "TTTCCC---TTTT")
    assertResult(FittingPairwiseAlignment.fittingAffineAlignment("AAAATTTGGGTTTTAAAA", "TTTCCCTTTT", score.mapValues(_ * 10), 10, 1))(46, "TTT---GGGTTTT", "TTTCCC---TTTT")
  }

  test("overlapAlignment") {

    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 1
          else -2)
        }
      }
    }.toMap

    assertResult(OverlapPairwiseAlignment.overlapAlignment("GCTATAAGAATAAACCACTAGATCACCTCCGGCTCGCTCACTCCTGATCATGGTTCGTGCTAACATCGCGCCGCGCTGACGCCGAATCGTTCGTAGGAGACAAGTCGACGACCTCATCTACAGGCAAAAGTTAAATTAGCTCTCGGCTAGATGTGACAATCGGAACCCTGCACCCTGCGTAATAGGGTAAATAGTCGGGAGTTGATGCACACACCTAGATATTGGCTGAATGACAGACTGCCATTCCTGCACTGGAAAGTAGAGTGCATATGTTTCGTGAGATTATGCAGGCTCTACGGTTATACTGGGCTCCACGGATTCGACCGGTACTGTTGATTGAAGACTCTTCTATAGAGGCTCTAACCGCGGAGGCCGCAACCAATCGACAATGAAGCACCCGTCGTCGGTATCGTTGGGAAGGACGACACCGTAAGGGCAGACTTTATCGTGACCCGTCTGCTTGCTAGAAAAGCCCTGGCGTTTGTACAACGTCCGTGCAGAATTAGCGTTTTTCTCAGGAAAGATGAGGGGGTTGATCATCATCTCGTTTCGCACGGGTCAAGCGCATTTTCCTACTGTTTTGGACACAGTACGTCTTCCACTGATCTCATACGGACATTACCAGCACCCTTTTGTACCTGTCGTAACTTGTGCCATTCTAGGCCCGTTTTCACTTGCGCTTATGATCATGGTTCCGCTGATCTATATGGGCCGGGTAGGGCACTCCCAGATGAAGGGGAGTAATGGTAGCCGGATCCAAGTGACGCGCCCTAGCGGCTCCGGAGTTTGATAGACGTCGTGCTATGGAGCGTTGGAGCGACAACGCGCTCGTGCTCTGGAAGGTCGCTGCTGATCCGTAA", "TACTGGTCCTGACCCACCTCACTTTGATGTCCCCTTTTCTCGTTTGCGCATCAAGATCTGGCCCGCAACTATTGGCCGTGAAAGGCACTCATCAATAAAGACAGTACTCACGCGGTCGGATCCAAATGCGCGCACCGAGCGGCCCAGGAGTTGATAGCGTCGAGTAACCTATTAGGACTCGAGGCAACTCGCGCTCTCTCAGGAGGCTCGCCTGCTAGTCCGTGAACGACGGATCTTTGGTGCTGCCTTCCTATCATGACATTGCCTAATAACGAGCGGCACCTACTCCCAGGTCTTTGAAGGGATGGCTTGTTTACCCCGATTCCGAGAAATAGAGATGACTCCTAAGGAAGTAATGAAGGAAGTTCAGTGGTATGGGTATCGTTTAGTTTGCCAGGGAGATTGCCCATAACCTAAGTCCCTAATACAGCAGTAGATCTCACCATAGATGTAGGAAAGCACAGTGATTTAGACGCTTAGCCAAATACAAAGGAATGTACCCCCTCCTAACACTGAGCACCGCTTATTTACTAGTATACTCAGAGTGTGGAGCGCTGAACGTTGTGTCAACAAGAACATAAGCCGCCGTGAATGAATTTGTGAAGGGGAGTGATCATGGTTTTACTCGTGGTAGATTTGGGCAGAACCTGATTCCTCACGTGTGAATGTAATTGAAGCTGACTCCCACACATACAGGCACGATTCTTTTAGATGATGTTTTAGGAAGCGCATTTCGTATTAACACTGCCTTGCATTTGATAACCATCACTTGTTCATTACATGATCCCATAGGGCCGTGTTGTTACTTTCGTGTTAGTCGAGCAGTATGACCACCTTTTCGGCGCTTGATATGCCTCAAGACGTGCGATTCAAGGAATCAAACAAATGAACGCCGCACTGGATGACTGGG", score, 2))((13, "TACCTG-TCGTAACTTGTGC-CA-TTCT-AGG-CCCGTTTTCAC-TT-GCGCTT-ATGATCATGGTTCCGCTGATCTATATGGGCCGGGTAGGGCACTCC-CAGATGAAGGGGAGTAATG--GTAGCCGGATCCAAGTGACGCGC-CCTAGCGGCTCC-GGAGTTTGATAGACGTCGTG---C-TAT--GGAGCGTTGGAGCGACAAC--GCGCTCGTGCTCTGGAAGG-TCGC-TGCT-GATCCGT-AA", "TAC-TGGTCCTGACCCAC-CTCACTT-TGATGTCCCCTTTTCTCGTTTGCGCATCAAGATC-TGGC-CCGCA-A-CTAT-TGG-CCGTGAAAGGCACTCATCA-ATAAAGAC-AGTACTCACGCGGTCGGATCCAAATG-CGCGCACCGAGCGGC-CCAGGAGTT-GATAG-CGTCGAGTAACCTATTAGGA-C-TCG-AG-G-CAACTCGCGCTC-T-CTCAGGA-GGCTCGCCTGCTAG-TCCGTGAA"))

  }

  test("introduce gaps") {
    assertResult(ConsensusProfileProfile.introduceGaps("AA-A", ""))("AA-A")
    assertResult(ConsensusProfileProfile.introduceGaps("", ""))("")
    assertResult(ConsensusProfileProfile.introduceGaps("", "AAA"))("AAA")
    assertResult(ConsensusProfileProfile.introduceGaps("", "AAA--AA"))("AAA--AA")
    assertResult(ConsensusProfileProfile.introduceGaps("AA-AA", "AAB--AA"))("AA---AA")
    assertResult(ConsensusProfileProfile.introduceGaps("AA-AA", "AA---AA"))("AA----AA")
  }

  test("consensus profile profile") {
    val score = {
      val l = List('A', 'T', 'G', 'C')
      l.flatMap { c1 =>
        l.map { c2 =>
          (c1, c2) -> (if (c1 == c2) 1
          else -2)
        }
      }
    }.toMap

    assertResult(ConsensusProfileProfile.consensusProfileProfile(Map("1" -> "AATTG"), Map("2" -> "AACCG"), score, 1, 1))(Map("1" -> "AA--TTG", "2" -> "AACC--G"))

    assertResult(ConsensusProfileProfile.consensusProfileProfile(Map("1" -> "AA-A", "2" -> "AAGA"), Map("3" -> "AA-T", "4" -> "AAGA"), score, 1, 1))(Map("1" -> "AA-A", "3" -> "AA-T", "2" -> "AAGA", "4" -> "AAGA"))

    assertResult(ConsensusProfileProfile.consensusProfileProfile(Map("1" -> "AA-A", "2" -> "AAGT"), Map("3" -> "AA-TCC", "4" -> "AAGCCC"), score, 1, 1))(Map("1" -> "AA----A", "2" -> "AAG---T", "3" -> "AA-TCC-", "4" -> "AAGCCC-"))

    assertResult(ConsensusProfileProfile.consensusProfileProfile(Map("1" -> "AA-AG", "2" -> "AAGT-", "5" -> "AA--C"), Map("3" -> "AA-TCC", "4" -> "AAGCCC"), score, 1, 1))(Map("1" -> "AA-AG--", "2" -> "AAGT---", "3" -> "AA--TCC", "4" -> "AAG-CCC", "5" -> "AA--C--"))

  }

  test("profile-profile") {

    assertResult(GlobalPairwiseProfileAlignment.globalAffineProfileAlignment(Seq("1" -> "AATTG"), Seq("2" -> "AACCG"), GlobalPairwiseProfileAlignment.pdotp, 0.2, 0.2))((-0.8, Seq("1" -> "AA--TTG"), Seq("2" -> "AACC--G")))

    assertResult(GlobalPairwiseProfileAlignment.globalAffineProfileAlignment(Seq("1" -> "AA-A", "2" -> "AAGA"), Seq("3" -> "AA-T", "4" -> "AAGA"), GlobalPairwiseProfileAlignment.pdotp, 1.0, 1.0))((-1.0, Seq("1" -> "AA-A", "2" -> "AAGA"), Seq("3" -> "AA-T", "4" -> "AAGA")))

    assertResult(GlobalPairwiseProfileAlignment.makeProfileAlignment(Map("1" -> "AA-A", "2" -> "AAGA", "3" -> "AA-T", "4" -> "AAGA"), GlobalPairwiseProfileAlignment.pdotp, 1.0, 1.0))((Seq("1" -> "AA-A", "2" -> "AAGA", "4" -> "AAGA", "3" -> "AA-T")))

    // assertResult(GlobalPairwiseProfileAlignment.consensusProfileProfile(Map("1" -> "AA-A", "2" -> "AAGT"), Map("3" -> "AA-TCC", "4" -> "AAGCCC"), score, 1, 1))(Map("1" -> "AA----A", "2" -> "AAG---T", "3" -> "AA-TCC-", "4" -> "AAGCCC-"))

    // assertResult(GlobalPairwiseProfileAlignment.consensusProfileProfile(Map("1" -> "AA-AG", "2" -> "AAGT-", "5" -> "AA--C"), Map("3" -> "AA-TCC", "4" -> "AAGCCC"), score, 1, 1))(Map("1" -> "AA-AG--", "2" -> "AAGT---", "3" -> "AA--TCC", "4" -> "AAG-CCC", "5" -> "AA--C--"))

  }

  test("profile-profile UPGMA") {

    assertResult(GlobalPairwiseProfileAlignment.makeProfileAlignmentUPGMAEditDistance(Seq("1" -> "AA-ATT", "2" -> "AAGAAG", "3" -> "AA-TTT", "4" -> "AAGAAG"), GlobalPairwiseProfileAlignment.pdotp, 1.0, 1.0, 5))((Seq("2" -> "AAGAAG", "4" -> "AAGAAG", "1" -> "AA-ATT", "3" -> "AA-TTT")))

    // assertResult(GlobalPairwiseProfileAlignment.consensusProfileProfile(Map("1" -> "AA-A", "2" -> "AAGT"), Map("3" -> "AA-TCC", "4" -> "AAGCCC"), score, 1, 1))(Map("1" -> "AA----A", "2" -> "AAG---T", "3" -> "AA-TCC-", "4" -> "AAGCCC-"))

    // assertResult(GlobalPairwiseProfileAlignment.consensusProfileProfile(Map("1" -> "AA-AG", "2" -> "AAGT-", "5" -> "AA--C"), Map("3" -> "AA-TCC", "4" -> "AAGCCC"), score, 1, 1))(Map("1" -> "AA-AG--", "2" -> "AAGT---", "3" -> "AA--TCC", "4" -> "AAG-CCC", "5" -> "AA--C--"))

  }

  test("kmercount") {
    assertResult(kmercounts(s8"AAAAA", 4).map(x => x._1.value.value -> x._2))(Map("AAAA" -> 2))
    assertResult(kmercounts(s8"AAAAAA", 4).map(x => x._1.value.value -> x._2))(Map("AAAA" -> 3))
    assertResult(kmercounts(s8"AABBAA", 4).map(x => x._1.value.value -> x._2))(Map("AABB" -> 1, "BBAA" -> 1, "ABBA" -> 1))
  }

}