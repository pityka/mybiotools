/* 
* The MIT License
*
* Copyright (c) 2015 ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland, 
* Group Fellay
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation 
* the rights to use, copy, modify, merge, publish, distribute, sublicense, 
* and/or sell copies of the Software, and to permit persons to whom the Software
* is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
* SOFTWARE.
*/

package mybiotools.sequence

import org.scalatest.FunSuite
import scala.io.Source
import java.io.File

import mybiotools.sequence._
import mybiotools.sequencedistance._

class TranalignTestSuite extends FunSuite {

  test("empty empty") {
    assertResult(None) { tranalign("", "") }
  }

  test("emtpy nuc nonempty prot") {
    assertResult(None) { tranalign("", "WG") }
  }

  test("nonempty nuc empty prot") {
    assertResult(None) { tranalign("TAGTAG", "") }
  }

  test("start same, nuc longer match") {
    assertResult(Some("TAGTAG")) { tranalign("TAGTAGGATGAT", "**") }
  }

  test("start same, nuc longer mismatch") {
    assertResult(Some("TAG---")) { tranalign("TAGAAAAAAA", "*W") }
  }

  test("start same, nuc longer 2, protein leaky (ill defined)") {
    assertResult(Some("TAG---")) { tranalign("TAGAAAATGGAC", "*W") }
  }

  test("start same, prot longer") {
    assertResult(Some("TAGTAG------")) { tranalign("TAGTAG", "**WW") }
  }

  test("start same, prot longer mismatch") {
    assertResult(Some("TAG---------")) { tranalign("TAGTAG", "*KWW") }
  }

  test("nuc starts later end same") {
    assertResult(Some("TAGTAG")) { tranalign("ATGTAGTAG", "**") }
  }

  test("nuc starts later end same mismatch") {
    assertResult(None) { tranalign("ATGTAGTAG", "KK") }
  }

  test("prot starts later, end same") {
    assertResult(None) { tranalign("TAGTAG", "KK**") }
  }

  test("prot subset of nuc") {
    assertResult(Some("TAGTAG")) { tranalign("TAGTAGTAG", "**") }
  }

  test("nuc subset of prot") {
    assertResult(None) { tranalign("TAG", "K*M") }
  }

  test("nuc subset of prot mismatch") {
    assertResult(None) { tranalign("GGG", "K*M") }
  }

  test("nuc has missing fragment") {
    assertResult(Some("TAG---TAG")) { tranalign("TAGTAG", "*W*") }
  }

  test("prot has missing fragment (ill defined case)") {
    assertResult(Some("TAGTGG---")) { tranalign("TAGTGGTAGAAA", "*WK") }
  }

  test("test1 ") {
    assertResult(Some("TAG---GGG---NAN")) { tranalign("TAGGGGNAN", "*TG-X") }
  }

  test("test3 ") {
    assertResult(Some("TAG---GGG---VAT")) { tranalign("TAGGGGVAT", "*TG-X") }
  }

  test("test4 ") {
    assertResult(Some("TAG------------")) { tranalign("TAGCCCCCCCCCCCCCCCC", "*AG-X") }
  }

  test("test5 ") {
    assertResult(Some("TAG---GGG---VAT")) { tranalign("TAGCCCCCCTAGGGGVAT", "*TG-X") }
  }

  test("test2") {
    val prot = "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------EEEIVIRSANLSKNTDIIIVHLNESVEINCTRPNNNTRRSIHIGP-GRAFYTTGEITGNIRQAYCTLNGTK-WNNTLSQIVKKLREHF--------KNKTIVFNASSGGDPEITTHSFNCGGEFFYCNTSQLF-NSTW-------MSNG-TWKGTEELN-NTNITLPCRIKQFINMWQEVGKAMYAPPIRGQIRCISNITGLLLTRDGEIKIN---GSNNESEIFRPLGGNX------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"

    val tranaligned

    val nucl = "GAAGAAGAGATAGTAATTAGGTCTGCCAATCTCAGTAAAAATACTGACATCATAATAGTACATTTGAATGAATCAGTAGAAATTAATTGTACAAGACCCAACAACAATACAAGAAGGAGTATACATATAGGACCAGGGAGAGCATTTTATACAACAGGAGAAATAACAGGAAATATAAGACAAGCATATTGTACCCTTAATGGAACAAAATGGAATAACACTTTAAGTCAGATAGTTAAAAAATTAAGAGAACACTTTAAGAATAAAACAATAGTCTTTAATGCATCCTCAGGAGGTGACCCTGAAATTACAACACACAGTTTTAATTGTGGAGGGGAATTTTTCTACTGTAATACATCACAACTGTTTAATAGTACTTGGATGTCTAATGGTACTTGGAAGGGTACTGAAGAGTTAAATAACACAAATATCACACTCCCATGCAGAATAAAACAATTTATAAACATGTGGCAGGAAGTAGGAAAAGCAATGTATGCCCCTCCCATCAGAGGACAAATTAGATGCATATCAAATATTACAGGGCTGCTATTAACAAGAGATGGTGAGATTAAGATTAACGGGAGCAATAACGAGAGCGAAATCTTCAGACCTTTAGGAGGAAATA"

    assertResult(tranaligned) { tranalign(nucl, prot).get }
  }

  test("ambiguous codon translation") {
    val codons = "NNN-ATGG-CNATHCAY-YYYTRATARTGANATGGCAT"
    assertResult(translate(codons, false))("XMAIHX***XGX")
    assertResult(translate(codons, true))("XXGXXXX***XGX")
  }

  test("selectFromNucleotideAminoAcidPositions 1") {
    val aa = "MQC--I-A"
    val nu = "ATGCAATGCATTGCA"
    assertResult(selectFromNucleotideAminoAcidPositions(nu, aa, Set(0), false))("ATGNNNNNN------NNN---NNN")
  }

  test("selectFromNucleotideAminoAcidPositions 2") {
    val aa = "MQC--I-A"
    val nu = "ATGCAATGCATTGCA"
    assertResult(selectFromNucleotideAminoAcidPositions(nu, aa, Set(0, 3), false))("ATGNNNNNN------NNN---NNN")
  }

  test("selectFromNucleotideAminoAcidPositions 3") {
    val aa = "MQC--I-A"
    val nu = "ATCCAATGCATTGCA"
    assertResult(selectFromNucleotideAminoAcidPositions(nu, aa, Set(0, 3), false))("")
  }

  test("selectFromNucleotideAminoAcidPositions 4") {
    val aa = "MQC--I-A"
    val nu = "ATCCAATGCATTGCA"
    assertResult(selectFromNucleotideAminoAcidPositions(nu, aa, Set(0, 3), false))("")
  }

  test("index in gapped") {
    assertResult(indexInGapped("--A", 0))(2)
    assertResult(indexInGapped("A--", 0))(0)
    assertResult(indexInGapped("AA--", 1))(1)
    assertResult(indexInGapped("--AA-AA---A-", 1))(3)
    assertResult(indexInGapped("--AA-AA---A-", 2))(5)
    assertResult(indexInGapped("--AA-AA---A-", 3))(6)
    assertResult(indexInGapped("--AA-AA---A-", 4))(10)
    assertResult(indexInGapped("--AA-AA---A", 4))(10)

    assertResult(indexInGapped("A--AA-AA---A-", 0))(0)
    assertResult(indexInGapped("A--AA-AA---A-", 1))(3)
    assertResult(indexInGapped("A--AA-AA---A-", 2))(4)
    assertResult(indexInGapped("A--AA-AA---A-", 3))(6)
    assertResult(indexInGapped("A--AA-AA---A-", 4))(7)
    assertResult(indexInGapped("A--AA-AA---A", 5))(11)
  }

  test("select positions from fasta") {
    val referenceNU = "ATGCATGCATGC"
    val referenceAlignedAA = "MH-A-C"
    val seq1NU = "GCATGCATGCAT"
    val seq1AA = "AC-M-H"
    assertResult(selectPositions(
      nucleotideFasta = Map("ref" -> referenceNU, "s1" -> seq1NU),
      alignedAminoAcidFasta = Map("ref" -> referenceAlignedAA, "s1" -> seq1AA),
      referenceName = "ref",
      selectAminoAcidColumns = Set(0, 2)
    ))(
      Map(
        "ref" -> "ATGNNN---GCA---NNN",
        "s1" -> "GCANNN---ATG---NNN"
      )
    )
    assertResult(selectPositions(
      nucleotideFasta = Map("ref" -> referenceNU, "s1" -> seq1NU),
      alignedAminoAcidFasta = Map("ref" -> referenceAlignedAA, "s1" -> seq1AA),
      referenceName = "ref",
      selectAminoAcidColumns = Set(0, 1)
    ))(
      Map(
        "ref" -> "ATGCAT---NNN---NNN",
        "s1" -> "GCATGC---NNN---NNN"
      )
    )
    assertResult(selectPositions(
      nucleotideFasta = Map("ref" -> referenceNU, "s1" -> seq1NU),
      alignedAminoAcidFasta = Map("ref" -> referenceAlignedAA, "s1" -> "ACMH"),
      referenceName = "ref",
      selectAminoAcidColumns = Set(0, 1)
    ))(
      Map(
        "ref" -> "ATGCAT---NNN---NNN",
        "s1" -> "GCATGCNNNNNNNNNNNN"
      )
    )
    intercept[RuntimeException](selectPositions(
      nucleotideFasta = Map("ref" -> referenceNU, "s1" -> seq1NU),
      alignedAminoAcidFasta = Map("ref" -> referenceAlignedAA, "s1" -> "AGMH"),
      referenceName = "ref",
      selectAminoAcidColumns = Set(0, 1)
    ))
  }

  test("patch up aligned sequence") {
    assertResult(patchAlignedSequence("ATGC", "ATGC"))("ATGC")
    assertResult(patchAlignedSequence("AT-GC", "ATGC"))("AT-GC")
    assertResult(patchAlignedSequence("AT---G-C", "ATGC"))("AT---G-C")
    assertResult(patchAlignedSequence("A---G-C", "ATGC"))("AT--G-C")
    assertResult(patchAlignedSequence("A---G-", "ATGC"))("AT--GC")
    assertResult(patchAlignedSequence("A---G----", "ATGC"))("AT--GC---")
    assertResult(patchAlignedSequence("---A---G----", "ATGC"))("---AT--GC---")
    assertResult(patchAlignedSequence("-------G----", "ATGC"))("AT-----GC---")
    assertResult(patchAlignedSequence("ATGC----", "ATGC"))("ATGC----")
    assertResult(patchAlignedSequence("---A-TGC----", "ATGC"))("---A-TGC----")
    assertResult(patchAlignedSequence("MGGKWSKSSIVGWPAIRERIR----RTRPAAEGVGAVSRDLEXHGAITSSNTASTNADCAWLE--AQEEEEVGFPVRPQVPLRPMTYKGALDLSHFLKEKGGLEGIIYSQKRQDILDLWVYHTQGYFPDWQNYTPGPGIRYPLTFGWCFKLVPVEPEKVEKATEGEDTCLLHPIXQHGMDDPEKEVLQWKFDSRLAFHHVARELHPEYYKNX-", "MGGKWSKSSIVGWPAIRERIRRTRPAAEGVGAVSRDLEXHGAITSSNTASTNADCAWLEAQEEEEVGFPVRPQVPLRPMTYKGALDLSHFLKEKGGLEGIIYSQKRQDILDLWVYHTQGYFPDWQNYTPGPGIRYPLTFGWCFKLVPVEPEKVEKATEGEDTCLLHPIXQHGMDDPEKEVLQWKFDSRLAFHHVARELHPEYYKN*X"))("MGGKWSKSSIVGWPAIRERIR----RTRPAAEGVGAVSRDLEXHGAITSSNTASTNADCAWLE--AQEEEEVGFPVRPQVPLRPMTYKGALDLSHFLKEKGGLEGIIYSQKRQDILDLWVYHTQGYFPDWQNYTPGPGIRYPLTFGWCFKLVPVEPEKVEKATEGEDTCLLHPIXQHGMDDPEKEVLQWKFDSRLAFHHVARELHPEYYKN*X")

    assertResult(patchAlignedSequence("MGGKWSKKC-GGWPAVRERMR----RAEPAAAGVGAASRDLXKHGAITSSNTAATNADCAWLE--AQEDEEVGFPVRPQVPLRPMXYRAAXDLSHFLKEKGGLEGLIXSQXRQDILDLWXYHTQGYFPDWQNYTPGPGTRFPLTFGWCFKLVPVEPEKVEEATEGENNCLLHPMXLHGMDDPEKEVLMWKFDSSLAFHHVAREMHPEYYKNCX", "MGGKWSKK*CGGWPAVRERMRRAEPAAAGVGAASRDLXKHGAITSSNTAATNADCAWLEAQEDEEVGFPVRPQVPLRPMXYRAAXDLSHFLKEKGGLEGLIXSQXRQDILDLWXYHTQGYFPDWQNYTPGPGTRFPLTFGWCFKLVPVEPEKVEEATEGENNCLLHPMXLHGMDDPEKEVLMWKFDSSLAFHHVAREMHPEYYKNCX"))("MGGKWSKK*CGGWPAVRERMR----RAEPAAAGVGAASRDLXKHGAITSSNTAATNADCAWLE--AQEDEEVGFPVRPQVPLRPMXYRAAXDLSHFLKEKGGLEGLIXSQXRQDILDLWXYHTQGYFPDWQNYTPGPGTRFPLTFGWCFKLVPVEPEKVEEATEGENNCLLHPMXLHGMDDPEKEVLMWKFDSSLAFHHVAREMHPEYYKNCX")
  }

  test("correlation") {
    assertResult(correlationNucleotideUpperCase("ATGC", "ATGC"))(1.0)
    assertResult(correlationNucleotideUpperCase("ATGC", "CGTA"))(-1.0 / 3)
    assertResult(correlationNucleotideUpperCase("ATGCNA", "CGTAAN"))(-1.0 / 3)
    assertResult(0.8254847645429363)(correlationNucleotideUpperCase("TTAGATACATTAACCATAGTAGCANNNGTAGCATTAGTAGTAGTAGCANNNATANNNNNNGTWNNNNNNTCTATANNNTTMATANNNNNNNNNAAANNNTTAAGANNNAGAAAANNNNNNAGGTTAATTGATNNNNNNAGAGAANNNNNNNNNNNNNNNNNNNNNNNNNNNGAAGGANNNNNNNNNGAA---------NNN---TCAGMGCTG------NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGAANNNAGANNNNNNGTGNNNATTNNNNNNNNNNNNNNNNNNNNNAGGNNNAGAACANNNAAANNNNNNGTANNNCACNNNATATATGTTNNNAAGNNNGCAAAGGGANNNCTTNNNAAANNNNNNNNNGAAAGCGCTAATNNNAGAATAAGTNNNNNNNNNTACNNNNNNCTAGGGGATGCTAAATTGGTAATAACANNNNNNNNNNNNNNNCATACANNNNNNCAGAACNNNNNNNNNNNNCAGNNNGTCNNNATANNNNNNAGGAAAAGGAGANNNAACNNNNNNGTAGACNNNGACCTANNNNNNCAANNNNNNNNNTTGTATTACNNNGATNNNNNNTCAGAATCTNNNNNNNNNCATGCCATATTANNNCATATAGTTAGTCCTAGGNNNGAMTATCAAGCANNNNNNAACAAGNNNNNNTCTNNNNNNNNNNNNNNNNNNGCAGCANNNRTAACACCAAAGAAGAGAAAGNNNNNNNNNNNNNNNGTTGCYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCAAGCCNNNGAAGACNNNNNNNNNCAGNNNNNNNNNTACAATGAANNNACANNNNNNCTCNNNNNNGAANNNNNNAGANNNNNNNNNAGANNNNNNNNNNNNCCGNNNNNNCATGGANNNNNNNNNTATNNNNNNGAANNNNNNNNNNNNNNNNNNGCANNNNNNGAANNNATGATAAGAATRNNNNNNNNNCTGNNNTTTATTNNNTTCNNNNNNNNNNNNCGANNNNNNNNNNNNNNNATTACTCCACAGAGGAGAGCANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNATANNNAGCGGGNNNGAANNNNNNAAANNNNNNAAANNNCGGNNNNNNNNNGGANNNAAGNNNAAANNNCGANNNNNNNNNATAGTANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTTNNNNNNGGCNNNNNNNNNACATCAGGANNNNNNAGACRANNNCTGGAANNNCTACAACCATCCCTTCAGNNNNNNNNNNNNNNNCTTAAANNNTTATATNNNACARTANNNACCNNNTATNNNNNNNNNCAAAGGATAGATGTAAAANNNNNNAAGNNNNNNNNNGATAAGATANNNNNNNNNNNNAACAAAAGTAAGAAAAGGGCANNNCAAGCAGCAGCTGACGCAGAAAATAAAAGCCAGGTCNNNCAANNNTACNNNNNNNNNCAGNNNCTTNNNNNNNNNNNNNNNNNNNNNCCCATATCANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNATANNNNNNNNNNNNNNNAGCNNNNNNGTANNNNNNNNNNNNACANNNNNNTCANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGAGNNNNNNNNNGAGNNNNNNNNNGAANNNNNNNNNTTGNNNNNNGTGCAANNNNNNNNNGTTGCANNNNNNNNNGTGNNNGAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNACCNNNNNNNNNNNNNNNGCANNNNNNNNNCATNNNNNNCCTATCNNNNNNNNNGAANNNNNNNNNAGANNNNNNGTCCTGNNNNNNNNNNNNATANNNNNNNNNNNNNNNNNNRYCNNNNNNNNNNNNNNNAGANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAGAACTNNNNNNNNNNNNNNNNNNTCANNNGAANNNNNNAATNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGCGNNNNNNNNNNNNAAGNNNNNNNNNNNNNNNNNNNNNNNNGCANNNACANNNNNNNNNNNNNNNACANNNNNNNNNNNNNNNNNNNNNNNNAGCNNNNNNNNNAGAGTTNNNNNNNNNNNNNNNNNNNNNGCAACANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN---------------------------------------------------------------------------NNNNNNNNNNNNAGCNNNGACAGCGACGAAGARNNNATCAAGACAGTCCAGATCNNNAAGTTTCTANNNNNNAGCAACNNNCCTNNNAGC---YCAGCGNNN---NNNNNNCAGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGAGAGANNNAGACAGNNNCAGWWCATTNNNRGATGGATTATTAGCACTCATNNNNNNNNNTCTRAGGAGNNNNNNCCTCTT------CAGNNNNNNCCGCTTGAGNNNNNNACTCTCGATTGTAACGAGGACTGTNNNACTTCTNNNNNNCAGNNNGTGNNNAATCCTNNNATATTGGTGNNNTCTCCTGAAGTANNNGAGTCANNNACTAAAGAA---NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGCAGTGGGACTANNNNNNTTGTTCATTNNNNNNNNNGGAGCANNNNNNNNNNNNNNNNNNNNNNNNTCGGTRACGNNNNNNNNNNNNNNNNNNCAANNNTTGTCTNNNNNNNNNNNNNNNNNNAACNNNCTGNNNAGGNNNNNNNNNNNNNNNCAANNNCTGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTCNNNNNNCTGNNNAGATACNNNTATNNNNNNCAGCTCCTGNNNATTNNNNNNNNNNNNNNNAAACTCNNNNNNACCNNNGCTNNNNNNNNNNNNGTTAGTNNNNNNAATAAATCTCTGAATCAGNNNNNNGATAACATGNNNNNNNNNCAGNNNGAAAAANNNNNNGACAATNNNNNNGAWKTANNNNNNAACNNNCTTGAAAAHNNNNNNAACNNNNNNGAAAAGNNNNNNCAAGAANNNNNNGAANNNGATAAANNNGCAAATNNNNNNAGTNNNNNNGACNNNACAAATNNNNNNNNNNNNNNNAAAATANNNNNNATGATAGTAGGANNNNNNATANNNNNNAGANNNGTTTTTACTGTACTTNNNGTAGTRAATAGAGTTNNNCAGNNNNNNNNNNNNTTATCGTTTNNNNNNCGCCTCNNNGCYCAGNNNGGACCCNNNAGGNNNGAAGGAATCGAAGAAGAANNNNNNGAGAGAGACAGAGACAGATCCAGWWCATTAGCRGATNNNTTATTAGCACTCATCNNNGTCNNNNNNAGGAGCNNNTTCCTCNNNAGCNNNCACCGCNNNAGANNNTTACTCTCGNNNGTAACGNNNACTGTGGAACTTNNNNNNCGCNNNNNNTGGGAAATCNNNAAANNNTGGTGGAATNNNNNNAAGNNNNNNAGTCAGNNNCTAAAGAATNNNNNNRTTAGCNNNCTCAACGCCACANNNATAGCANNNGCTNNNNNNNNNNNNNNNATTTTAGAAGGCTTACAAAGAATTTTTXXXXXXXXXXXXXXXNNNNNNXXXNNNNNNNNNNNNNNNXXXNNNNNNXXXNNNXXX---------------------------------------------------------------------------------------------------------------------------------------------------------------------------NNNNNNNNNNNNNNNNNNNNNNNNNNNCTTNNNACAATAAGGATAGGANNNNNNCTAAAGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTANNNGAAATGGATNNNCCANNNAAANNNAAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAGANNNNNNGATCAGATACCCATANNNNNNTGTNNNCATAAAGCTATANNNNNNNNNNNNGTANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCAGATTNNNNNNNNNNNNNNNNNN------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------NNNNNNNNNNNNNNNGAANNNNNNNNNNNNAAANNNNNNNNNNNNNNNNNNNNNNNNAAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAAANNNNNNATANNNNNNNNNACANNNNNNNNNNNNNNNNNNNNNNNNNNNAAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTANNNNNNNNNAAGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAAANNNNNNNNNNNNTGGNNNNNNNNNNNNNNNNNNNNNNNNNNNGCANNNNNNAAAARGAAGAAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTTNNNNNNGACAAAGACNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNATANNNNNNGAGNNNNNNNNNATTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGCANNNNNNNNNAGTNNNNNNACAAAANNNNNNGAGNNNNNNNNNAAACAANNNNNNGACATAGTTNNNNNNNNNNNNATGNNNNNNNNNNNNGTANNNNNNNNNNNNNNNATAGGACAGNNNNNNACANNNATAGAGGARNNNNNNMGANNNNNNNNNAGGNNNNNNTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGAGNNNNNNNNNNNNGACAGCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGCANNNNNNAAAGTAAAGCAANNNNNNAARNNNNNNAGGNNNACCNNNGCANNNNNNNNNGTAGTACCANNNACAAAANNNNNNNNNCTANNNNNNNNNNNNNNNNNNNNNNNNNNNAAGGAANNNNNNNNNNNNGTGNNNNNNNNNNNNTCANNNGAANNNATAGCANNNCTANNNNNNNNNGGGCAAGGCNNNNNNACCNNNNNNATTTATNNNNNNCCATTTNNNNNNNNNNNNNNNNNNNNNNNNNNNAGAATGNNNGGYGCCNNNNNNNNNNNNATAAAANNNNNNACAGAGGCANNNNNNAAAATAACCACANNNAGCNNNGTANNNNNNNNNAAAACTNNNNNNNNNAGANNNNNNNNNCAAAAANNNNNNNNNXXXXXXNNNNNNXXXXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXXXXNNNNNNXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXNNNXXXXXXXXXXXXNNNXXXNNNNNNNNNXXXNNNXXXXXXNNNXXXNNNNNNXXXXXXXXXXXXXXXNNNNNNNNNNNNNNNXXXNNNNNNNNNXXXNNNNNNXXXNNNNNNNNNNNNNNNNNNXXXXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXNNNNNNXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXNNNXXXNNNNNNNNNNNNXXXNNNNNNXXXNNNNNNXXXXXXNNNNNNXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXXXXNNNNNNNNNNNNNNNXXXNNNXXXNNNXXXNNNNNNNNNNNNNNNNNNNNNGATNNNNNNNNNGAAGACNNNGAGAARNNNNNNAGTNNNNNNAGAGCANNNNNNAGTGATNNNNNNCTGNNNNNNATAGTANNNNNNNNNNNNGTANNNAGCNNNNNNNNNNNNNNNCTANNNNNNNNNNNNATGNNNNNNNNNNNNNNNNNNNNNNNNNNNATANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTTNNNCTGNNNNNNNNNNNNNNNNNNNNNNNNNNNATRNNNNNNNNNNNNNNNNNNGCANNNNNNNNNNNNNNNNNNNNNNNNNNNATCNNNNNNNNNNNNNNNNNNNNNNNNNNN---------------------ACAACAATANNNNNNNNNNNNNNNACTNNNNNNACCNNNACTGCGACTNNNNNNNNNNNNNNNNNNNNNNNNATC------------------------------------------------------------------NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNATGNNNAAANNNNNNNNNAAANNNNNNGGANNNNNNNNNNNNNNNNNNNNNNNNNNNAAGNNNNNNGTANNNNNNNNNNNNTTCNNNNNNNNNNNNNNNAGAAAANNNNNNNNNNNNGGGNNNAGTNNNNNNNNNNNNNNNATANNNNNNNNNNNNTCANNNCTANNNNNNAAAGCANNNNNNNNNCAANNNTCAAAAATTNNNNNNNNNNNNNNNNNNNNNNNNNNNAACNNNGAGNNNCTTNNNNNNNNNNNNNNNAAGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGATAATAGTGACNNNNNNNNNNNNNNNNNNNNNNNNGCANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAGTAGANNNNNNNNNGATNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGCTNNNACCCCTNNNTATNNNNNNAAANNNTGCTATNNNNNNTATAAGNNNNNNGTAACCNNNGGCNNNNNNNNNTCCTATNNNNNNNNNNNNNNNAGACAGNNNNNNAGARCTGATCAAGACAGTCCAGATCATNNNGTTTCTATATCAAAGNNNCCCGCCTCCNNNCYCAGC---NNNGACCCGACANNNCCGAAGGAATCGAAGAAGAAGNNNNNNAGAGAGACAGAGACAGATCCAGWWCAT------", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTANNNAGCGGGNNNAAANNNNNNAAANNNNNNAAANNNCGGNNNNNNNNNGGGNNNAAGNNNCAGNNNMARNNNNNNNNNATAGTANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTCNNNNNNKGCNNNNNNNNNACAGCAGATNNNNNNAGACAANNNCTGGGANNNCTACAACCGTCCCTGCAGNNNNNNNNNNNNNNNCTTARANNNTTATACNNNACAGTANNNACCNNNTATNNNNNNNNNCAAAACCTAGAGGTAARANNNNNNAAGNNNNNNNNNGATAAGATANNNNNNNNNNNNAACAAAAGTAAGAAAAAGGCANNNCAAGCAGCAGCTGACACAGGAAACAGCAACCAGGTCNNNCAANNNTACNNNNNNNNNCAANNNCTCNNNNNNNNNNNNNNNNNNNNNGCCATATCANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTANNNNNNNNNNNNNNNAGCNNNNNNGTANNNNNNNNNNNNTCANNNNNNTCANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGAGNNNNNNNNNGAGNNNNNNNNNGAANNNNNNNNNTTGNNNNNNGTACATNNNNNNNNNATTGCANNNNNNNNNATGNNNGAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNACCNNNNNNNNNNNNNNNGGANNNNNNNNNAATNNNNNNCCTATCNNNNNNNNNGAANNNNNNNNNAGANNNNNNATCCTGNNNNNNNNNNNNATANNNNNNNNNNNNNNNNNNAYCNNNNNNNNNNNNNNNAGANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAAAACTNNNNNNNNNNNNNNNNNNTCANNNGATNNNNNNAATNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGCGNNNNNNNNNNNNAAGNNNNNNNNNNNNNNNNNNNNNNNNGCANNNACANNNNNNNNNNNNNNNACANNNNNNNNNNNNNNNNNNNNNNNNGGCNNNNNNNNNAGARTTNNNNNNNNNNNNNNNNNNNNNGTAACAAGTCCACCTRCCATAATGATGNNNAGANNNAATTTTAGGAACCAAAGAAAGACTNNNNNNNNNNNNNNNNNNNNNAAAGAANNNNNNATANNNARAAATNNNARGNNNNNNNNNAAAAAGNNNNNNNNNNNNNNNNNNAGGNNNNNNNNNNNNNNNNNNGATNNNACTGAGAGANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN---------------------------------------------------------------------------NNNNNNNNNNNNXXXNNNXXXXXXXXXXXXXXXNNNXXXXXXXXXXXXXXXXXXNNNXXXXXXXXXNNNNNNXXXXACNNNCTTNNNAGC---CAGGAGNNN---NNNNNNCAGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGAGAARNNNAGRCAGNNNCACAAGATTNNNGGATGGATTCTTAGCGCTTTTNNNNNNNNNTCTACGGAGNNNNNNCCTCTT------CAGNNNNNNCCGCTTGACNNNNNNACTCTTGATTGCAACGAGGATTGTNNNACTTCTNNNNNNCAGNNNGTGNNNAGCTCTNNNATACGGGTGNNNYCTTCTACAGTANNNGAGYCANNNACTGAAGAA---NNNNNNGGCAAGTGGNNNNNNCGTAGTGTGATTGGANNNCCTGCTGTANNNGAAAGAATGAAGCGAACTGAGCCACCANNNGYCNNNNNNNNNGCAGTANNNCGANNNNNNGGAAAACATNNNNNNGTCNNNAGTAGCNNNNNNGCAGCTNNNNNNGCTGACTGTGCCNNNCTANNNNNNCAAGAGGAGGACGAGNNNNNNNNNNNNNNNARANNNNNNNNNNNNTTANNNNNNNNNRCTTACAAGGSANNNGTANNNCTTNNNCATNNNTTAAAAGAAAAGNNNNNNNNNGAANNNCTAATTTGGNNNCAAAAANNNCAGGATNNNNNNNNNCTGNNNATCNNNAACNNNNNNNNNTACNNNNNNNNNNNNCAGAACNNNNNNCCANNNNNNNNNACCNNNTTTNNNNNNACCTTTNNNNNNNNNTTCNNNNNNNNNNNNGTTGAGCCAGATCAGGTANNNAAGGCCAATGAAGGANNNAACATCAGCNNNNNNCACNNNATGAGCCTGNNNNNNATGGAGNNNAAGNNNGGANNNNNNNNNATGNNNAAGNNNNNNNNNCGCNNNNNNTTTCATNNNGTGNNNCGANNNATGCATNNNGAGTACTACNNNGACTGC---NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGCAGTGGGAATANNNNNNATGTTCCTTNNNNNNNNNGGAGCANNNNNNNNNNNNNNNNNNNNNNNNTCARTGACGNNNNNNNNNNNNNNNNNNCAANNNTTGTCTNNNNNNNNNNNNNNNNNNAGCNNNTTGNNNAAANNNNNNNNNNNNNNNCAGNNNATGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTCNNNNNNGTGNNNAGATACNNNAAGNNNNNNCAGCTCCTGNNNATTNNNNNNNNNNNNNNNAAACTCNNNNNNACCNNNACTNNNNNNNNNNNNGCTAGTNNNNNNAATAGATCTCTGGAWATGNNNNNNCAAAACATGNNNNNNNNNGAGNNNGAAAGANNNNNNGAAAATNNNNNNGGCTTANNNNNNACTNNNATTGAAGAANNNNNNAACNNNNNNGAAAAGNNNNNNCTAGAANNNNNNGAANNNGATAAGNNNGCAAATNNNNNNAATNNNNNNRACNNNTCAAACNNNNNNNNNNNNNNNAAAATANNNNNNATGATAGTAGGANNNNNNATANNNNNNAGANNNGTTTTTGCTGTACTTNNNATAGTGAATARAGTTNNNCAGNNNNNNNNNNNNTTATCGTTGNNNNNNCACTTCNNNGCCAGGNNNGGACTCNNNAGGNNNGAAGGAATCGAAGAAGAANNNNNNGAGAGAARCAGAGRCAGATCCACAAGATTAGTGGATNNNTTCTTAGCGCTTTTCNNNGACNNNNNNCGGAGCNNNTKCCTCNNNAGCNNNCACCGCNNNACANNNTTACTCTTGNNNGCAACGNNNATTGTGGAACTTNNNNNNCACNNNNNNTGGGAAGCTNNNAAANNNGGGTGGAAYNNNNNNCAGNNNNNNAGYCAGNNNCTGAAGAATNNNNNNATTAGCNNNCTTAATGCCACANNNATAGCANNNGCTNNNNNNNNNNNNNNNGYTATAGAAGTATTACAAAGCATTTGTAGAGCTXXXXXXXXXNNNNNNXXXNNNNNNNNNNNNNNNXXXNNNNNNXXXNNNXXX---------------------------------------------------------------------------------------------------------------------------------------------------------------------------NNNNNNNNNNNNNNNNNNNNNNNNNNNCTANNNACAATAAAAATAGGGNNNNNNCTAAAGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTANNNGAAATGAATNNNTCANNNAGANNNAAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAGANNNNNNGATCAGATACCCCTANNNNNNTGTNNNCATAAAGTCATANNNNNNNNNNNNATANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCAGCTTNNNNNNNNNNNNNNNNNN------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------NNNNNNNNNNNNNNNXXXNNNNNNNNNNNNXXXNNNNNNNNNNNNNNNNNNNNNNNNXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAAANNNNNNRCANNNNNNNNNACANNNNNNNNNNNNNNNNNNNNNNNNNNNAAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTANNNNNNNNNAAGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAGANNNNNNNNNNNNTGGNNNNNNNNNNNNNNNNNNNNNNNNNNNGCANNNNNNAAAAARAAAAAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTTNNNNNNGATAAAGAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNATANNNNNNGAGNNNNNNNNNATTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGCANNNNNNNNNAGTNNNNNNATAAAANNNNNNGAGNNNNNNNNNAAACAANNNNNNGAAATAGTTNNNNNNNNNNNNATGNNNNNNNNNNNNGTANNNNNNNNNNNNNNNATAGGGCAGNNNNNNATANNNATAGAGGAANNNNNNCAANNNNNNNNNAAGNNNNNNCTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXNNNNNNNNNNNNXXXXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXNNNNNNXXXXXXXXXXXXNNNNNNXXXNNNNNNXXXNNNXXXNNNXXXNNNNNNNNNXXXXXXXXXNNNXXXXXXNNNNNNNNNXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXXXXNNNNNNNNNNNNXXXNNNNNNNNNNNNXXXNNNXXXNNNXXXXXXNNNXXXNNNNNNNNNXXXXXXXXXNNNNNNXXXNNNNNNXXXXXXNNNNNNXXXXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXXXXNNNXXXXXXNNNNNNNNNNNNXXXXXXNNNNNNXXXXXXXXXNNNNNNXXXXXXXXXXXXNNNXXXNNNXXXNNNNNNNNNXXXXXXNNNNNNNNNXXXNNNNNNNNNXXXXXXNNNNNNNNNGAAACANNNNNNACAGATNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAAAGAANNNNNNGTANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAATNNNGAGACTAAATTANNNAAANNNNNNNNNGTTNNNGACAGANNNAGANNNNNNGTTGTCCCCTTAACTNNNNNNNNNNNNNNNAAGNNNNNNNNNCAANNNNNNCATNNNNNNNNNNNNNNNNNNGGATTANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTANNNNNNATTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRTANNNAGTNNNNNNNNNNNNCAGNNNNNNAAANNNNNNAAAGTCNNNNNNGCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCAAGTANNNNNNNNNNNNNNNACTNNNATCNNNAAANNNNNNNNNNNNNNNNNNNNNGATNNNNNNNNNGAAGAANNNGAGAAANNNNNNAGTNNNNNNAGAGCANNNNNNAGTGATNNNNNNCTGNNNNNNGTAGTANNNNNNNNNNNNGTANNNAGCNNNNNNNNNNNNNNNCTANNNNNNNNNNNNATGNNNNNNNNNNNNNNNNNNNNNNNNNNNATANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTTNNNCTGNNNNNNNNNNNNNNNNNNNNNNNNNNNATANNNNNNNNNNNNNNNNNNGCANNNNNNNNNNNNNNNNNNNNNNNNNNNCTCNNNNNNNNNNNNNNNNNNNNNNNNNNN---------------------AAAACAGTANNNNNNNNNNNNNNNAGCNNNNNNACCNNNACTACGGTTNNNNNNNNNNNNNNNNNNNNNNNNATC------------------------------------------------------------------NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNATGNNNAAANNNNNNNNNAAANNNNNNGGANNNNNNNNNNNNNNNNNNNNNNNNNNNAAGNNNNNNGTANNNNNNNNNNNNTTCNNNNNNNNNNNNNNNAGAAAANNNNNNNNNNNNGGGNNNAGTNNNNNNNNNNNNNNNATANNNNNNNNNNNNACANNNATANNNNNNAAAGAANNNNNNNNNCAANNNACAAAAATTNNNNNNNNNNNNNNNNNNNNNNNNNNNAGCNNNGATNNNCTTNNNNNNNNNNNNNNNAAANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGATAACAGTGACNNNNNNNNNNNNNNNNNNNNNNNNRTANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNAGTAGANNNNNNNNNGATNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXNNNXXXXXXNNNXXXNNNNNNXXXNNNXXXXXXNNNNNNXXXXXXNNNNNNXXXXXXNNNXXXNNNNNNNNNXXXXXXNNNNNNNNNNNNNNNXXXXXXNNNNNNXXXXXXXXXXXXXXXXXXXXXXXXXXXNNNXXXXXXXXXXXXXXXNNNCCCACTTCCNNNCCAGGA---NNNGACTCGACANNNCCGAAGGAATCGAAGAAGAAGNNNNNNAGAGAARCAGAGRCAGATCCACAAGAT------"))
  }

  ignore("PSD") {
    val seq1 = "ACTGCATGCATGCAANNNNNNNNGCATGCCAAAAAAAAAAA"
    val seq2 = "AGTNNNNNNTTGCAAGCATGCATGCATGCCAAAAAAAAAAA"
    val seq3 = "ACTGCATGNNNNNNANNNNNNNNNCATGCCAAAAAAAAAAA"
    val f1 = distanceMatrix(Map("s1" -> seq1, "s2" -> seq2, "s3" -> seq3))((x, y) => 1.0 - pDistanceUpperCase(x, y))
    val f = mybiotools.pcanew.makePositiveByClipping(f1)
    println(f1)
    println(f)
    val pca = mybiotools.pcanew.pcaFromGRM(f)
    println(pca.eigenValues.sorted)

  }

  ignore("percentage mismatch is positive definite") {
    val chars = List('A', 'T', 'G', 'C', 'N', 'N', 'N', 'N', 'N', 'N', 'N')

    val sequence =
      (1 to 50 map (j => j.toString -> (1 to 1000 map (i => chars(scala.util.Random.nextInt(chars.size))) mkString)) toMap) ++
        (51 to 100 map (j => j.toString -> (1 to 1000 map (i => chars(scala.util.Random.nextInt(4))) mkString)) toMap)

    val f = distanceMatrix(sequence)((x, y) => 1.0 - pDistanceUpperCase(x, y)).sortedRIx.sortedCIx

    println(f)

    val pca = mybiotools.pcanew.pcaFromGRM(f)
    assertResult(true)(pca.eigenValues.min >= 0.0)

  }

  test("pdistance") {
    assertResult(0) { pDistance("atGc", "atgc") }
    assertResult(1) { pDistance("a", "t") }
    assertResult(1) { pDistance("atgC", "Cgta") }
    assertResult(0.25) { pDistance("atgc", "ttgc") }
    assertResult(0.25) { pDistance("aTgc", "AAgc") }
    assertResult(0.5) { pDistance("atgc", "aaAc") }
    assertResult(0.25) { pDistance("a-tGC", "Tatgc") }
    assertResult(0.125) { pDistance("atgcAtGc", "tTgcatgc") }

    assertResult(0) { pDistanceUpperCase("atgc".toUpperCase, "atgc".toUpperCase) }
    assertResult(1) { pDistanceUpperCase("a".toUpperCase, "t".toUpperCase) }
    assertResult(1) { pDistanceUpperCase("atgc".toUpperCase, "cgta".toUpperCase) }
    assertResult(0.25) { pDistanceUpperCase("atgc".toUpperCase, "ttgc".toUpperCase) }
    assertResult(0.25) { pDistanceUpperCase("atgc".toUpperCase, "aagc".toUpperCase) }
    assertResult(0.5) { pDistanceUpperCase("atgc".toUpperCase, "aaac".toUpperCase) }
    assertResult(0.25) { pDistanceUpperCase("a-tgc".toUpperCase, "tatgc".toUpperCase) }
    assertResult(0.125) { pDistanceUpperCase("atgcatgc".toUpperCase, "ttgcatgc".toUpperCase) }
  }
  ignore("pdistance measure") {
    0 to 5000 foreach { k =>

      val text = 0 to 10000 map (i => 'A') mkString

      val t1 = System.nanoTime
      pDistanceUpperCase(text, text)
      println((System.nanoTime - t1))
    }
  }
  test("Jukes Cantor") {
    assertResult(0) { jc69Distance("atgcatgc-", "atgcatgcc") }
    assertResult(0) { jc69Distance("atgcatgc", "atgcatgc") }
    assertResult(0.13674116759546595) { jc69Distance("at-gcatgc", "atagtatgc") }
    assertResult(0.30409883108112323) { jc69Distance("atgc", "ctgc") }
    assertResult(0.2635484151284164) { jc69Distance("tatgcatgcc", "aat-catgca") }
    assertResult(0.30409883108112323) { jc69Distance("tatgcatgccaaa", "aat-catgcaaac") }
  }

  test("LogDet") {
    assertResult(0) { logdetDistance("atgcatgc-", "atgcatgcc") }
    assertResult(0) { logdetDistance("atgcatgc", "atgcatgc") }
    assertResult(0.13732653608351364) { logdetDistance("at-gcatgc", "atagtatgc") }
    assertResult(0.0) { logdetDistance("atgc", "ctgc") }
    assertResult(0.10136627702704115) { logdetDistance("tatgcatgc", "aat-catgc") }
    assertResult(0.10136627702704115) { logdetDistance("aat-catgc", "tatgcatgc") }
    assertResult(0.2640083461244891) { logdetDistance("tatgcatgccaaa", "aat-catgcaaac") }
  }

}