

#####################################
# GATK3 Genotype calling pipeline   #
#####################################

# General description
# ===================
# The pipeline has 3 main steps: preprocessing, genotyping, filtering (vqsr)
# 
# 1. Preprocessing
# ----------------
# 
# Each input bam file is checked whether 
# a, it is sorted by chromosome order, 
# b, whether it has the chr prefix in the chromosomes, 
# c, has index
# d, needs deduplication? (this is not autodetected, must be set in the config)
# 
# If any of these fails, then it is corrected. Indexing is done via samtools,
# sorting is done via samtools, chr prefix is added in the with picard's java 
# api. Deduplication is done by picard's command line tool.
# 
# 2. Genotyping
# -------------
# 
# The genotyping can be done in horizontal (genomic, e.g by chr, etc) chunks.
# These chunks are merged just before the VQSR steps by CombineVCF.
# By default, the chunking is disabled (== 1 chunk). The chunking is 
# simply implemented by passing -L to GATK.
# There is an first input interval bed file which restricts the whole run to a 
# certain genomic region. I think full chr1-22-X-Y is appropriate here to get
# most out of the bam file contents.
# 
# For each chunk:
# Each sample bam file is separately processed with HaplotypeCaller
#  in GATK3 mode. Once these separate runs on HC are done, they are "joint 
#  called" by GenotypeGVCF. 
# If gvcf files were generated before, then there is an option to inject those 
# directly into this process of the pipeline, 
# i.e to skip HaplotypeCaller runs.
# The two can be mixed, that is HC will be run on the supplied bams if any.
# 
# The results from each chunk's GenotypeGVCF is then combined with CombineVCF.
# 
# 
# 3. VQSR
# -------
# Filters the variants to a second interval bed file (e.g capture kit), then
# inserts the dbsnp annotations, then runs vqsr as described in the 
# Best Practices. 
# At the end there is a plink conversion.
# 
# This last step can be run separately by invoking the genotyper.VQSRApp main 
# class in the jar. (java -cp path-to-jar genotyper.VQSRApp)
# 
# 
# Notes
# =====
# Each of the subtasks are run separately and there is a subsystem which 
# ensures that they are run exactly once even in case of an interruption. 
# This system also has a simple file sharing capability so that the pipeline 
# can used on computers without a shared unix filesystem. 
# Each of the subtasks has some CPU and RAM requirement which needs to be 
# defined.
#
# 
# GATK commands
# =============
# Here are the exact GATK command lines for reference for the main steps. 
# I omitted the variable parameters.
# 
# HaplotypeCaller
# java -Xmx -jar -T HaplotypeCaller -R  -I  (-L) -o  \
# --genotyping_mode DISCOVERY -stand_emit_conf 10 -stand_call_conf 30 \
# -nct  ${extraArgs} -A Coverage -A QualByDepth -A DepthPerSampleHC \ 
# -A FisherStrand -A MappingQualityRankSumTest -A HardyWeinberg \
# -A LikelihoodRankSumTest -A ReadPosRankSumTest -A StrandBiasBySample \
# -A VariantType --log_to_file 
# 
# GenotypeGVCF
# java -Xmx -jar  -T GenotypeGVCFs -R -V (-L) -o -nt ${extraArgs} \
#  -A Coverage -A QualByDepth -A DepthPerSampleHC -A FisherStrand \
#   -A MappingQualityRankSumTest -A HardyWeinberg -A LikelihoodRankSumTest \
#   -A ReadPosRankSumTest -A StrandBiasBySample -A VariantType \
#   --log_to_file 
# 
# VQSR Train
# java -Xmx -jar -T VariantRecalibrator -R -input $resourceString \
#  -an DP -an QD -an FS -an MQRankSum -an ReadPosRankSum \
#   -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
#    --minNumBadVariants --log_to_file \
#     -recalFile \
#      -tranchesFile \
#       -rscriptFile \
#        -nt  $extraArgs
# 
# VQSR Apply
# java -jar -T ApplyRecalibration -R -input  $modeArg --ts_filter_level 99.0 \
# --log_to_file  -recalFile -tranchesFile  -o-nt 
# 
# 
#
# Default configuration follows
# =============================
# This configuration file follows HOCON syntax, which kind-of JSON.
#
# You define key-value pairs. 
# A key is a hierarchical key.
# Nesting is done by brackets (parent{child=X}) or dots (parent.child=X).
# A list is written like [1,2,3]. 
# A so called object is written by {a = 1 ; b = 2} . (semicolon == newline)
# A key can be overwritten from the command line by -Dkey=value e.g. 
# java -Dkey=value ... 
# A substitution can be applied by ${key} where key is an another key or a 
# bash environmental variable.
#
# See https://github.com/typesafehub/config for more details.
# 
# This documentation can be extracted from the jar file by
# `unzip GenotypePipeline-assembly-*.jar reference.conf`

genotyper {

# Path to a file which lists the input bam files.
# Each line hase 5 entries (or less): bam bai sorted? haschr? needsDedup?
# If bai is missing then use dash(-). 
# haschr? is autodetected or overriden by true,false.
# same for sorted.
# needsDedup? has to be true or false.
bamListFile = ""

# An alternative way to give the input files is to list them here
# This is list of objects with fields: 
# bam, bai, haschr, sorted, needsDeduplication
# Autodetected fields can be omitted.
bams = []

# Path to a file which lists the input bam files. These will be remapped with snap.
remapbamListFile = ""

fastqtable = ""
fastqs = ""
fastqregexp = """^(?<sample>.*)_[^_]{12}_(?<lane>L\d+)_(?<readpair>R[12])_(?<chunk>\d\d\d).*\.fastq\.gz$"""


# An alternative way to give the input files is to list them here. These will be remapped with snap.
remapbams = []

# The resources for GATK VQSR, this is a list of objects with fields
# name, known, prior, truth, file, training. See GATK docs.
vqsr.snpresources = []

# Same as before, for indel VQSR
vqsr.indelresources = []

# RAM in megabytes, CPUs in 1 CPU core
dedup.RAM= 2000

addchr.RAM = 1000

sortbam.RAM = 10000

indexbam.RAM = 1000

reducebam.RAM = 1500

haplotypecaller.RAM = 8000
haplotypecaller.CPU = 1

# extra command line arguments to HC
haplotypecaller.extraArgs = ""

genotypeGVCF.CPU = 1
genotypeGVCF.RAM = 20000

# If this is positive, chunking will happen
maxChunkSize = -1 # -1 means everything in bed file

# This is the HaplotypeCaller intervals file
# - means no -L switch in HC and GVCF
bedFile = "-" 


vqsr.minBadVariantsIndel = 1000
vqsr.minBadVariantsSNP = 1000
vqsr.maxGaussiansIndel = 4
vqsr.maxGaussiansSNP = 8
vqsr.RAM=5000
vqsr.CPU=6

eval.RAM=5000
eval.CPU=6
eval.extraArgs = ""

combine.RAM=5000
combine.CPU=2

# This is a name under which the combined multisample files will emerge
#combine.outputname = ""

# Stop the pipeline before Haplotypecaller.
preprocessonly  = false

# Interval bed file applied after genotyping before VQSR
#variantFiltration.bed = 

variantFiltration.extraArg = ""
variantFiltration.RAM = 1000

dbsnpannotation.RAM = 1000

# Take the rs numbers from this.
#dbsnpannotation.vcf = 

# This is used by VariantEval.
#dbsnpvcfBefore1kg = 

# File with a list of gvcfs. These will be joint called together (see above).
gvcfs = "-"

#cutBeforeGenotypeGVCF = false

# This key is only used if VQSR is invoked separately from the 
# genotyper.VQSRApp main class. Input vcf for that step.
# vqsr.vcfinput = 

subset.RAM = 2000

snap.index.seed = 23
snap.index.CPU = 1
snap.index.RAM = 80000
snap.index.extraArgs = ""
snap.map.CPU = 1
snap.map.RAM = 64000
snap.map.extraArgs = ""

platypus{
	RAM=60000
	CPU=1
	folder="${PLATYPUSFOLDER}"
	run = false
}

referenceHasChrPrefix = true

}

#######################################
# GATK3 Genotype calling pipeline end #
#######################################

